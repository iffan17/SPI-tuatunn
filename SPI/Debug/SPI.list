
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005894  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b94  08005b94  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b94  08005b94  00006b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b9c  08005b9c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b9c  08005b9c  00006b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ba0  08005ba0  00006ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005ba4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000006c  08005c10  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08005c10  0000733c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fec  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295b  00000000  00000000  0001c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0001e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eee  00000000  00000000  0001fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278e1  00000000  00000000  00020bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163ea  00000000  00000000  000484cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff9a5  00000000  00000000  0005e8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  0015e2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00163d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005a5c 	.word	0x08005a5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005a5c 	.word	0x08005a5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fd45 	bl	8001042 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f846 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f966 	bl	800088c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005c0:	f000 f88e 	bl	80006e0 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005c4:	f000 f8d6 	bl	8000774 <MX_SPI3_Init>
  MX_TIM2_Init();
 80005c8:	f000 f912 	bl	80007f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //  SPITxRx_Setup();//for mode 1,1
    IODIRB_Setup();
 80005cc:	f000 f9ee 	bl	80009ac <IODIRB_Setup>
    HAL_TIM_Base_Start_IT(&htim2);
 80005d0:	4817      	ldr	r0, [pc, #92]	@ (8000630 <main+0x80>)
 80005d2:	f002 fec5 	bl	8003360 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fda4 	bl	8001124 <HAL_Delay>
	  SPITxRx_readIO();
 80005dc:	f000 fa06 	bl	80009ec <SPITxRx_readIO>
	  ReadSwitch();
 80005e0:	f000 fa7c 	bl	8000adc <ReadSwitch>
	  if(Switch == n && n != 0){
 80005e4:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <main+0x84>)
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <main+0x88>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d117      	bne.n	8000620 <main+0x70>
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <main+0x88>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <main+0x70>
		  point++;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <main+0x8c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <main+0x8c>)
 8000602:	701a      	strb	r2, [r3, #0]
		  n = 0;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <main+0x88>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		  Mode = 1;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <main+0x90>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	2104      	movs	r1, #4
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <main+0x94>)
 8000616:	f001 f8b7 	bl	8001788 <HAL_GPIO_WritePin>
		  SPITxRx_readIO(); // light update : off
 800061a:	f000 f9e7 	bl	80009ec <SPITxRx_readIO>
 800061e:	e006      	b.n	800062e <main+0x7e>
	  }
	  else if(Mode == 0){
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <main+0x90>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1d6      	bne.n	80005d6 <main+0x26>
		  Switch = 0;
 8000628:	4b02      	ldr	r3, [pc, #8]	@ (8000634 <main+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 800062e:	e7d2      	b.n	80005d6 <main+0x26>
 8000630:	20000180 	.word	0x20000180
 8000634:	20000000 	.word	0x20000000
 8000638:	200001e3 	.word	0x200001e3
 800063c:	200001e4 	.word	0x200001e4
 8000640:	200001e2 	.word	0x200001e2
 8000644:	48000c00 	.word	0x48000c00

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2238      	movs	r2, #56	@ 0x38
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fb65 	bl	8004d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800066a:	2000      	movs	r0, #0
 800066c:	f001 f8c8 	bl	8001800 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2340      	movs	r3, #64	@ 0x40
 800067c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000686:	2304      	movs	r3, #4
 8000688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800068a:	2355      	movs	r3, #85	@ 0x55
 800068c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f962 	bl	8001968 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006aa:	f000 fa8b 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fc60 	bl	8001f8c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d2:	f000 fa77 	bl	8000bc4 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	@ 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 80006e6:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <MX_LPUART1_UART_Init+0x90>)
 80006e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ea:	4b20      	ldr	r3, [pc, #128]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000722:	4812      	ldr	r0, [pc, #72]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000724:	f003 fb4e 	bl	8003dc4 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 fa49 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000736:	f004 f8e9 	bl	800490c <HAL_UARTEx_SetTxFifoThreshold>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000740:	f000 fa40 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000748:	f004 f91e 	bl	8004988 <HAL_UARTEx_SetRxFifoThreshold>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000752:	f000 fa37 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_LPUART1_UART_Init+0x8c>)
 8000758:	f004 f89f 	bl	800489a <HAL_UARTEx_DisableFifoMode>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000762:	f000 fa2f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000088 	.word	0x20000088
 8000770:	40008000 	.word	0x40008000

08000774 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_SPI3_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <MX_SPI3_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_SPI3_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_SPI3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_SPI3_Init+0x74>)
 800078e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000792:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_SPI3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_SPI3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007aa:	2238      	movs	r2, #56	@ 0x38
 80007ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_SPI3_Init+0x74>)
 80007d4:	f002 f844 	bl	8002860 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f9f1 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000011c 	.word	0x2000011c
 80007ec:	40003c00 	.word	0x40003c00

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000814:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000818:	f244 2267 	movw	r2, #16999	@ 0x4267
 800081c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000826:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800082a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_TIM2_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000838:	4813      	ldr	r0, [pc, #76]	@ (8000888 <MX_TIM2_Init+0x98>)
 800083a:	f002 fd39 	bl	80032b0 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f9be 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000856:	f002 ff4b 	bl	80036f0 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000860:	f000 f9b0 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_TIM2_Init+0x98>)
 8000872:	f003 f9cb 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 f9a2 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000180 	.word	0x20000180

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b3f      	ldr	r3, [pc, #252]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a3e      	ldr	r2, [pc, #248]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b3c      	ldr	r3, [pc, #240]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b39      	ldr	r3, [pc, #228]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a38      	ldr	r2, [pc, #224]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	4b2d      	ldr	r3, [pc, #180]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a2c      	ldr	r2, [pc, #176]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0x114>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a26      	ldr	r2, [pc, #152]	@ (80009a0 <MX_GPIO_Init+0x114>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000922:	f000 ff31 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2104      	movs	r1, #4
 800092a:	481e      	ldr	r0, [pc, #120]	@ (80009a4 <MX_GPIO_Init+0x118>)
 800092c:	f000 ff2c 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4818      	ldr	r0, [pc, #96]	@ (80009a8 <MX_GPIO_Init+0x11c>)
 8000948:	f000 fd84 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094c:	2320      	movs	r3, #32
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f000 fd75 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096a:	2304      	movs	r3, #4
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	@ (80009a4 <MX_GPIO_Init+0x118>)
 8000982:	f000 fd67 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2028      	movs	r0, #40	@ 0x28
 800098c:	f000 fcc7 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000990:	2028      	movs	r0, #40	@ 0x28
 8000992:	f000 fcde 	bl	8001352 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000c00 	.word	0x48000c00
 80009a8:	48000800 	.word	0x48000800

080009ac <IODIRB_Setup>:
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
HAL_Delay(1);
}

void IODIRB_Setup()//at BEGIN 2
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2104      	movs	r1, #4
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <IODIRB_Setup+0x30>)
 80009b6:	f000 fee7 	bl	8001788 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;//write
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <IODIRB_Setup+0x34>)
 80009bc:	2240      	movs	r2, #64	@ 0x40
 80009be:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x01;//IODIRB
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <IODIRB_Setup+0x34>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0b00000000;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <IODIRB_Setup+0x34>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	709a      	strb	r2, [r3, #2]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80009cc:	2303      	movs	r3, #3
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <IODIRB_Setup+0x38>)
 80009d0:	4903      	ldr	r1, [pc, #12]	@ (80009e0 <IODIRB_Setup+0x34>)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <IODIRB_Setup+0x3c>)
 80009d4:	f001 fff0 	bl	80029b8 <HAL_SPI_TransmitReceive_IT>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	48000c00 	.word	0x48000c00
 80009e0:	200001d8 	.word	0x200001d8
 80009e4:	200001cc 	.word	0x200001cc
 80009e8:	2000011c 	.word	0x2000011c

080009ec <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80009f0:	2104      	movs	r1, #4
 80009f2:	4834      	ldr	r0, [pc, #208]	@ (8000ac4 <SPITxRx_readIO+0xd8>)
 80009f4:	f000 feb0 	bl	8001758 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d05f      	beq.n	8000abe <SPITxRx_readIO+0xd2>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009fe:	2200      	movs	r2, #0
 8000a00:	2104      	movs	r1, #4
 8000a02:	4830      	ldr	r0, [pc, #192]	@ (8000ac4 <SPITxRx_readIO+0xd8>)
 8000a04:	f000 fec0 	bl	8001788 <HAL_GPIO_WritePin>
		if (Mode == 0)
 8000a08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <SPITxRx_readIO+0xdc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10c      	bne.n	8000a2a <SPITxRx_readIO+0x3e>
		{
			SPITx[0] = 0b01000001;//read
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a12:	2241      	movs	r2, #65	@ 0x41
 8000a14:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x12;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a18:	2212      	movs	r2, #18
 8000a1a:	705a      	strb	r2, [r3, #1]
			SPITx[2] = 0;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	709a      	strb	r2, [r3, #2]
			Mode = 1;
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <SPITxRx_readIO+0xdc>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e043      	b.n	8000ab2 <SPITxRx_readIO+0xc6>
		}
		else if(Mode == 1)
 8000a2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <SPITxRx_readIO+0xdc>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d13f      	bne.n	8000ab2 <SPITxRx_readIO+0xc6>
		{
			SPITx[0] = 0b01000000;//write
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a34:	2240      	movs	r2, #64	@ 0x40
 8000a36:	701a      	strb	r2, [r3, #0]
			SPITx[1] = 0x15;//OLATB
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a3a:	2215      	movs	r2, #21
 8000a3c:	705a      	strb	r2, [r3, #1]
			//LED_From();
			if(n == 0 || (n >= 5 && n < 9)){
 8000a3e:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <SPITxRx_readIO+0x6a>
 8000a46:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d907      	bls.n	8000a5e <SPITxRx_readIO+0x72>
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b08      	cmp	r3, #8
 8000a54:	d803      	bhi.n	8000a5e <SPITxRx_readIO+0x72>
				SPITx[2] = 0xFF; //4 latter bit , 0 on 1 off
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a58:	22ff      	movs	r2, #255	@ 0xff
 8000a5a:	709a      	strb	r2, [r3, #2]
 8000a5c:	e026      	b.n	8000aac <SPITxRx_readIO+0xc0>
			}
			else if(n == 1){
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d103      	bne.n	8000a6e <SPITxRx_readIO+0x82>
				SPITx[2] = 0b11111110;
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a68:	22fe      	movs	r2, #254	@ 0xfe
 8000a6a:	709a      	strb	r2, [r3, #2]
 8000a6c:	e01e      	b.n	8000aac <SPITxRx_readIO+0xc0>
			}
			else if(n == 2){
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d103      	bne.n	8000a7e <SPITxRx_readIO+0x92>
				SPITx[2] = 0b11111101;
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a78:	22fd      	movs	r2, #253	@ 0xfd
 8000a7a:	709a      	strb	r2, [r3, #2]
 8000a7c:	e016      	b.n	8000aac <SPITxRx_readIO+0xc0>
			}
			else if(n == 3){
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d103      	bne.n	8000a8e <SPITxRx_readIO+0xa2>
				SPITx[2] = 0b11111011;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a88:	22fb      	movs	r2, #251	@ 0xfb
 8000a8a:	709a      	strb	r2, [r3, #2]
 8000a8c:	e00e      	b.n	8000aac <SPITxRx_readIO+0xc0>
			}
			else if(n == 4){
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d103      	bne.n	8000a9e <SPITxRx_readIO+0xb2>
				SPITx[2] = 0b11110111;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000a98:	22f7      	movs	r2, #247	@ 0xf7
 8000a9a:	709a      	strb	r2, [r3, #2]
 8000a9c:	e006      	b.n	8000aac <SPITxRx_readIO+0xc0>
			}
			else if(n >= 9){
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <SPITxRx_readIO+0xe4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b08      	cmp	r3, #8
 8000aa4:	d902      	bls.n	8000aac <SPITxRx_readIO+0xc0>
				SPITx[2] = 0b11111111;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000aa8:	22ff      	movs	r2, #255	@ 0xff
 8000aaa:	709a      	strb	r2, [r3, #2]
			}
			Mode = 0;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SPITxRx_readIO+0xdc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		}
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <SPITxRx_readIO+0xe8>)
 8000ab6:	4905      	ldr	r1, [pc, #20]	@ (8000acc <SPITxRx_readIO+0xe0>)
 8000ab8:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <SPITxRx_readIO+0xec>)
 8000aba:	f001 ff7d 	bl	80029b8 <HAL_SPI_TransmitReceive_IT>

	}
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	48000c00 	.word	0x48000c00
 8000ac8:	200001e2 	.word	0x200001e2
 8000acc:	200001d8 	.word	0x200001d8
 8000ad0:	200001e3 	.word	0x200001e3
 8000ad4:	200001cc 	.word	0x200001cc
 8000ad8:	2000011c 	.word	0x2000011c

08000adc <ReadSwitch>:

void ReadSwitch()
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
	if (SPIRx[2]==14)
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <ReadSwitch+0x4c>)
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	2b0e      	cmp	r3, #14
 8000ae6:	d103      	bne.n	8000af0 <ReadSwitch+0x14>
		{
			Switch = 1;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <ReadSwitch+0x50>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
		}
	else if (SPIRx[2]==7)
		{
			Switch = 3;
		}
}
 8000aee:	e016      	b.n	8000b1e <ReadSwitch+0x42>
	else if (SPIRx[2]==13)
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <ReadSwitch+0x4c>)
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	2b0d      	cmp	r3, #13
 8000af6:	d103      	bne.n	8000b00 <ReadSwitch+0x24>
			Switch = 2;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <ReadSwitch+0x50>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	701a      	strb	r2, [r3, #0]
}
 8000afe:	e00e      	b.n	8000b1e <ReadSwitch+0x42>
	else if (SPIRx[2]==11)
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <ReadSwitch+0x4c>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	2b0b      	cmp	r3, #11
 8000b06:	d103      	bne.n	8000b10 <ReadSwitch+0x34>
			Switch = 4;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <ReadSwitch+0x50>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	701a      	strb	r2, [r3, #0]
}
 8000b0e:	e006      	b.n	8000b1e <ReadSwitch+0x42>
	else if (SPIRx[2]==7)
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <ReadSwitch+0x4c>)
 8000b12:	789b      	ldrb	r3, [r3, #2]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	d102      	bne.n	8000b1e <ReadSwitch+0x42>
			Switch = 3;
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <ReadSwitch+0x50>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	701a      	strb	r2, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	200001cc 	.word	0x200001cc
 8000b2c:	20000000 	.word	0x20000000

08000b30 <HAL_SPI_TxRxCpltCallback>:
//
//}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
//	if (Mode>1)
//	{
//		Mode = 0;
//	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000b3e:	f000 fe23 	bl	8001788 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	48000c00 	.word	0x48000c00

08000b50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a16      	ldr	r2, [pc, #88]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d124      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
		LMode1+=1;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b6a:	701a      	strb	r2, [r3, #0]
		if (LMode1>16)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b10      	cmp	r3, #16
 8000b72:	d902      	bls.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			LMode1 = 1;
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
		}
		if (LMode1%8 == 0){
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d110      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x5a>
			n = rand() % 10;
 8000b88:	f003 ff8a 	bl	8004aa0 <rand>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b90:	fb83 1302 	smull	r1, r3, r3, r2
 8000b94:	1099      	asrs	r1, r3, #2
 8000b96:	17d3      	asrs	r3, r2, #31
 8000b98:	1ac9      	subs	r1, r1, r3
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	1ad1      	subs	r1, r2, r3
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ba8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000180 	.word	0x20000180
 8000bb8:	20000001 	.word	0x20000001
 8000bbc:	66666667 	.word	0x66666667
 8000bc0:	200001e3 	.word	0x200001e3

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bda:	4a0e      	ldr	r2, [pc, #56]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c06:	f000 fe9f 	bl	8001948 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b09e      	sub	sp, #120	@ 0x78
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2254      	movs	r2, #84	@ 0x54
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f874 	bl	8004d26 <memset>
  if(huart->Instance==LPUART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc0 <HAL_UART_MspInit+0xa8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d136      	bne.n	8000cb6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fbb5 	bl	80023c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ffb0 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <HAL_UART_MspInit+0xac>)
 8000c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c68:	4a16      	ldr	r2, [pc, #88]	@ (8000cc4 <HAL_UART_MspInit+0xac>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <HAL_UART_MspInit+0xac>)
 8000c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_UART_MspInit+0xac>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <HAL_UART_MspInit+0xac>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_UART_MspInit+0xac>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c94:	230c      	movs	r3, #12
 8000c96:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb2:	f000 fbcf 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3778      	adds	r7, #120	@ 0x78
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40008000 	.word	0x40008000
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <HAL_SPI_MspInit+0x8c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d130      	bne.n	8000d4c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_SPI_MspInit+0x90>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	4a1a      	ldr	r2, [pc, #104]	@ (8000d58 <HAL_SPI_MspInit+0x90>)
 8000cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_SPI_MspInit+0x90>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_SPI_MspInit+0x90>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <HAL_SPI_MspInit+0x90>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_SPI_MspInit+0x90>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d1a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <HAL_SPI_MspInit+0x94>)
 8000d38:	f000 fb8c 	bl	8001454 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2033      	movs	r0, #51	@ 0x33
 8000d42:	f000 faec 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d46:	2033      	movs	r0, #51	@ 0x33
 8000d48:	f000 fb03 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	@ 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40003c00 	.word	0x40003c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d70:	d113      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d76:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f000 fac5 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d94:	201c      	movs	r0, #28
 8000d96:	f000 fadc 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <NMI_Handler+0x4>

08000db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <MemManage_Handler+0x4>

08000dc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfe:	f000 f973 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <TIM2_IRQHandler+0x10>)
 8000e0e:	f002 fb1f 	bl	8003450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000180 	.word	0x20000180

08000e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e24:	f000 fcc8 	bl	80017b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <SPI3_IRQHandler+0x10>)
 8000e32:	f001 fe6f 	bl	8002b14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000011c 	.word	0x2000011c

08000e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_kill>:

int _kill(int pid, int sig)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e5a:	f003 ffb3 	bl	8004dc4 <__errno>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2216      	movs	r2, #22
 8000e62:	601a      	str	r2, [r3, #0]
  return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_exit>:

void _exit (int status)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffe7 	bl	8000e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <_exit+0x12>

08000e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e00a      	b.n	8000eae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e98:	f3af 8000 	nop.w
 8000e9c:	4601      	mov	r1, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	b2ca      	uxtb	r2, r1
 8000ea6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbf0      	blt.n	8000e98 <_read+0x12>
  }

  return len;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e009      	b.n	8000ee6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf1      	blt.n	8000ed2 <_write+0x12>
  }
  return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_close>:

int _close(int file)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f20:	605a      	str	r2, [r3, #4]
  return 0;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_isatty>:

int _isatty(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f003 ff18 	bl	8004dc4 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20020000 	.word	0x20020000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	200001e8 	.word	0x200001e8
 8000fc8:	20000340 	.word	0x20000340

08000fcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff0:	480d      	ldr	r0, [pc, #52]	@ (8001028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f003 fed7 	bl	8004dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fac5 	bl	80005b0 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   r0, =_estack
 8001028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001034:	08005ba4 	.word	0x08005ba4
  ldr r2, =_sbss
 8001038:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800103c:	2000033c 	.word	0x2000033c

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>

08001042 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f95b 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f80e 	bl	8001074 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e001      	b.n	8001068 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001064:	f7ff fdb4 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001068:	79fb      	ldrb	r3, [r7, #7]

}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_InitTick+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d022      	beq.n	80010ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_InitTick+0x6c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001094:	fbb1 f3f3 	udiv	r3, r1, r3
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f966 	bl	800136e <HAL_SYSTICK_Config>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10f      	bne.n	80010c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d809      	bhi.n	80010c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
 80010b6:	f000 f932 	bl	800131e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_InitTick+0x70>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e007      	b.n	80010d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e004      	b.n	80010d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e001      	b.n	80010d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_IncTick+0x1c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_IncTick+0x20>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a03      	ldr	r2, [pc, #12]	@ (8001104 <HAL_IncTick+0x1c>)
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	200001ec 	.word	0x200001ec
 8001108:	2000000c 	.word	0x2000000c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200001ec 	.word	0x200001ec

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d004      	beq.n	8001148 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_Delay+0x40>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4413      	add	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001148:	bf00      	nop
 800114a:	f7ff ffdf 	bl	800110c <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	429a      	cmp	r2, r3
 8001158:	d8f7      	bhi.n	800114a <HAL_Delay+0x26>
  {
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000000c 	.word	0x2000000c

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	@ (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff40 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff33 	bl	80011cc <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa4 	bl	80012c4 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d00d      	beq.n	80013ba <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e047      	b.n	800144a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020e 	bic.w	r2, r2, #14
 80013c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f003 021f 	and.w	r2, r3, #31
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001406:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00c      	beq.n	800142a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800141e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001428:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
    }
  }
  return status;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001462:	e15a      	b.n	800171a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 814c 	beq.w	8001714 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001490:	2b02      	cmp	r3, #2
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d017      	beq.n	8001532 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d123      	bne.n	8001586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0203 	and.w	r2, r3, #3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a6 	beq.w	8001714 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <HAL_GPIO_Init+0x2e4>)
 80015ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001738 <HAL_GPIO_Init+0x2e4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d4:	4b58      	ldr	r3, [pc, #352]	@ (8001738 <HAL_GPIO_Init+0x2e4>)
 80015d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e0:	4a56      	ldr	r2, [pc, #344]	@ (800173c <HAL_GPIO_Init+0x2e8>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800160a:	d01f      	beq.n	800164c <HAL_GPIO_Init+0x1f8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4c      	ldr	r2, [pc, #304]	@ (8001740 <HAL_GPIO_Init+0x2ec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d019      	beq.n	8001648 <HAL_GPIO_Init+0x1f4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4b      	ldr	r2, [pc, #300]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1f0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_GPIO_Init+0x2f4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1ec>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a49      	ldr	r2, [pc, #292]	@ (800174c <HAL_GPIO_Init+0x2f8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1e8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a48      	ldr	r2, [pc, #288]	@ (8001750 <HAL_GPIO_Init+0x2fc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1e4>
 8001634:	2305      	movs	r3, #5
 8001636:	e00a      	b.n	800164e <HAL_GPIO_Init+0x1fa>
 8001638:	2306      	movs	r3, #6
 800163a:	e008      	b.n	800164e <HAL_GPIO_Init+0x1fa>
 800163c:	2304      	movs	r3, #4
 800163e:	e006      	b.n	800164e <HAL_GPIO_Init+0x1fa>
 8001640:	2303      	movs	r3, #3
 8001642:	e004      	b.n	800164e <HAL_GPIO_Init+0x1fa>
 8001644:	2302      	movs	r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x1fa>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_GPIO_Init+0x1fa>
 800164c:	2300      	movs	r3, #0
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	f002 0203 	and.w	r2, r2, #3
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	4093      	lsls	r3, r2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165e:	4937      	ldr	r1, [pc, #220]	@ (800173c <HAL_GPIO_Init+0x2e8>)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <HAL_GPIO_Init+0x300>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001690:	4a30      	ldr	r2, [pc, #192]	@ (8001754 <HAL_GPIO_Init+0x300>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_GPIO_Init+0x300>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ba:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_GPIO_Init+0x300>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170e:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_GPIO_Init+0x300>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f ae9d 	bne.w	8001464 <HAL_GPIO_Init+0x10>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001000 	.word	0x48001000
 8001750:	48001400 	.word	0x48001400
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e001      	b.n	800177a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f806 	bl	80017e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d141      	bne.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800180e:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181a:	d131      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800181c:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001822:	4a46      	ldr	r2, [pc, #280]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001828:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001834:	4a41      	ldr	r2, [pc, #260]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800183c:	4b40      	ldr	r3, [pc, #256]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2232      	movs	r2, #50	@ 0x32
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	4a3f      	ldr	r2, [pc, #252]	@ (8001944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	3301      	adds	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	e002      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185a:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001866:	d102      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f2      	bne.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800187a:	d158      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e057      	b.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001880:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001886:	4a2d      	ldr	r2, [pc, #180]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800188c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001890:	e04d      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001898:	d141      	bne.n	800191e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800189a:	4b28      	ldr	r3, [pc, #160]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a6:	d131      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ae:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b8:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c0:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2232      	movs	r2, #50	@ 0x32
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018de:	e002      	b.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d102      	bne.n	80018fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f2      	bne.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001906:	d112      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e011      	b.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800191c:	e007      	b.n	800192e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40007000 	.word	0x40007000
 8001940:	20000004 	.word	0x20000004
 8001944:	431bde83 	.word	0x431bde83

08001948 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001956:	6093      	str	r3, [r2, #8]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40007000 	.word	0x40007000

08001968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e2fe      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001986:	4b97      	ldr	r3, [pc, #604]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001990:	4b94      	ldr	r3, [pc, #592]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3e>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b8d      	ldr	r3, [pc, #564]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e2d9      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b85      	ldr	r3, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a84      	ldr	r2, [pc, #528]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b7f      	ldr	r3, [pc, #508]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7e      	ldr	r2, [pc, #504]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b7c      	ldr	r3, [pc, #496]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7b      	ldr	r2, [pc, #492]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b78      	ldr	r3, [pc, #480]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a77      	ldr	r2, [pc, #476]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b75      	ldr	r3, [pc, #468]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a74      	ldr	r2, [pc, #464]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fb74 	bl	800110c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fb70 	bl	800110c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e29e      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb60 	bl	800110c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fb5c 	bl	800110c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	@ 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e28a      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a62:	4b60      	ldr	r3, [pc, #384]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d075      	beq.n	8001b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7e:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a88:	4b56      	ldr	r3, [pc, #344]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0x136>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x13c>
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d11f      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x154>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e25d      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b49      	ldr	r3, [pc, #292]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	061b      	lsls	r3, r3, #24
 8001aca:	4946      	ldr	r1, [pc, #280]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ad0:	4b45      	ldr	r3, [pc, #276]	@ (8001be8 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff facd 	bl	8001074 <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d043      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e249      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3c      	ldr	r2, [pc, #240]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb08 	bl	800110c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b00:	f7ff fb04 	bl	800110c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e232      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	492d      	ldr	r1, [pc, #180]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	604b      	str	r3, [r1, #4]
 8001b32:	e01a      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fae4 	bl	800110c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fae0 	bl	800110c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e20e      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e0>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d041      	beq.n	8001bfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fabd 	bl	800110c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fab9 	bl	800110c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1e7      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ef      	beq.n	8001b96 <HAL_RCC_OscConfig+0x22e>
 8001bb6:	e020      	b.n	8001bfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bbe:	4a09      	ldr	r2, [pc, #36]	@ (8001be4 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff faa0 	bl	800110c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bce:	e00d      	b.n	8001bec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fa9c 	bl	800110c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d906      	bls.n	8001bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e1ca      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bec:	4b8c      	ldr	r3, [pc, #560]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ea      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80a6 	beq.w	8001d54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c0c:	4b84      	ldr	r3, [pc, #528]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2b4>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x2b6>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b7f      	ldr	r3, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	4a7e      	ldr	r2, [pc, #504]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4a:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa59 	bl	800110c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fa55 	bl	800110c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e183      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	4b6c      	ldr	r3, [pc, #432]	@ (8001e24 <HAL_RCC_OscConfig+0x4bc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d108      	bne.n	8001c96 <HAL_RCC_OscConfig+0x32e>
 8001c84:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8a:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c94:	e024      	b.n	8001ce0 <HAL_RCC_OscConfig+0x378>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d110      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x358>
 8001c9e:	4b60      	ldr	r3, [pc, #384]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca4:	4a5e      	ldr	r2, [pc, #376]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cae:	4b5c      	ldr	r3, [pc, #368]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x378>
 8001cc0:	4b57      	ldr	r3, [pc, #348]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc6:	4a56      	ldr	r2, [pc, #344]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd6:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d016      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fa10 	bl	800110c <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fa0c 	bl	800110c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e138      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ed      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x388>
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff f9f9 	bl	800110c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff f9f5 	bl	800110c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e121      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ed      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b35      	ldr	r3, [pc, #212]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	4a34      	ldr	r2, [pc, #208]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d03c      	beq.n	8001dda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff f9c8 	bl	800110c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d80:	f7ff f9c4 	bl	800110c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0f2      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ef      	beq.n	8001d80 <HAL_RCC_OscConfig+0x418>
 8001da0:	e01b      	b.n	8001dda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001da8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff f9ab 	bl	800110c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dba:	f7ff f9a7 	bl	800110c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0d5      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ef      	bne.n	8001dba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80c9 	beq.w	8001f76 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	f000 8083 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d15e      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_RCC_OscConfig+0x4b8>)
 8001e00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f981 	bl	800110c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	e00c      	b.n	8001e28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f97d 	bl	800110c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d905      	bls.n	8001e28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0ab      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	4b55      	ldr	r3, [pc, #340]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ec      	bne.n	8001e0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e34:	4b52      	ldr	r3, [pc, #328]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b52      	ldr	r3, [pc, #328]	@ (8001f84 <HAL_RCC_OscConfig+0x61c>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6a11      	ldr	r1, [r2, #32]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e44:	3a01      	subs	r2, #1
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e4e:	0212      	lsls	r2, r2, #8
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e56:	0852      	lsrs	r2, r2, #1
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	0552      	lsls	r2, r2, #21
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e62:	0852      	lsrs	r2, r2, #1
 8001e64:	3a01      	subs	r2, #1
 8001e66:	0652      	lsls	r2, r2, #25
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e6e:	06d2      	lsls	r2, r2, #27
 8001e70:	430a      	orrs	r2, r1
 8001e72:	4943      	ldr	r1, [pc, #268]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e84:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a3d      	ldr	r2, [pc, #244]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f93c 	bl	800110c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f938 	bl	800110c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e066      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x530>
 8001eb6:	e05e      	b.n	8001f76 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f922 	bl	800110c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f91e 	bl	800110c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e04c      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ede:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eea:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4924      	ldr	r1, [pc, #144]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60cb      	str	r3, [r1, #12]
 8001ef6:	e03e      	b.n	8001f76 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e039      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_OscConfig+0x618>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d12c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d123      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d11b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d113      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	3b01      	subs	r3, #1
 8001f58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	019f800c 	.word	0x019f800c
 8001f88:	feeefffc 	.word	0xfeeefffc

08001f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e11e      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b91      	ldr	r3, [pc, #580]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 020f 	bic.w	r2, r3, #15
 8001fba:	498c      	ldr	r1, [pc, #560]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b8a      	ldr	r3, [pc, #552]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e106      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d073      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d129      	bne.n	800203c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe8:	4b81      	ldr	r3, [pc, #516]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0f4      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ff8:	f000 f99e 	bl	8002338 <RCC_GetSysClockFreqFromPLLSource>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4a7c      	ldr	r2, [pc, #496]	@ (80021f4 <HAL_RCC_ClockConfig+0x268>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d93f      	bls.n	8002086 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002006:	4b7a      	ldr	r3, [pc, #488]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d033      	beq.n	8002086 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d12f      	bne.n	8002086 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002026:	4b72      	ldr	r3, [pc, #456]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800202e:	4a70      	ldr	r2, [pc, #448]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002034:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e024      	b.n	8002086 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d107      	bne.n	8002054 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002044:	4b6a      	ldr	r3, [pc, #424]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0c6      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0be      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002064:	f000 f8ce 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8002068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4a61      	ldr	r2, [pc, #388]	@ (80021f4 <HAL_RCC_ClockConfig+0x268>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d909      	bls.n	8002086 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002072:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800207a:	4a5d      	ldr	r2, [pc, #372]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 800207c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002080:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b5a      	ldr	r3, [pc, #360]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4957      	ldr	r1, [pc, #348]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7ff f838 	bl	800110c <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7ff f834 	bl	800110c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e095      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d023      	beq.n	800211c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b43      	ldr	r3, [pc, #268]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a42      	ldr	r2, [pc, #264]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020f8:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002100:	4a3b      	ldr	r2, [pc, #236]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b39      	ldr	r3, [pc, #228]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4936      	ldr	r1, [pc, #216]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
 800211a:	e008      	b.n	800212e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b80      	cmp	r3, #128	@ 0x80
 8002120:	d105      	bne.n	800212e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a32      	ldr	r2, [pc, #200]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800212c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212e:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d21d      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 020f 	bic.w	r2, r3, #15
 8002144:	4929      	ldr	r1, [pc, #164]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800214c:	f7fe ffde 	bl	800110c <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe ffda 	bl	800110c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e03b      	b.n	80021e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_ClockConfig+0x260>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d1ed      	bne.n	8002154 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4917      	ldr	r1, [pc, #92]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490f      	ldr	r1, [pc, #60]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b6:	f000 f825 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_RCC_ClockConfig+0x264>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490c      	ldr	r1, [pc, #48]	@ (80021f8 <HAL_RCC_ClockConfig+0x26c>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <HAL_RCC_ClockConfig+0x270>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_RCC_ClockConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe ff4a 	bl	8001074 <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	04c4b400 	.word	0x04c4b400
 80021f8:	08005a74 	.word	0x08005a74
 80021fc:	20000004 	.word	0x20000004
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800220a:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d102      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e047      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800221c:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d102      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002228:	4b26      	ldr	r3, [pc, #152]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e03e      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800222e:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d136      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800223a:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002258:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002262:	68d2      	ldr	r2, [r2, #12]
 8002264:	0a12      	lsrs	r2, r2, #8
 8002266:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
      break;
 8002270:	e00c      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	0a12      	lsrs	r2, r2, #8
 8002280:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
      break;
 800228a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0e5b      	lsrs	r3, r3, #25
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	3301      	adds	r3, #1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e001      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022ac:	693b      	ldr	r3, [r7, #16]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	016e3600 	.word	0x016e3600

080022c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022e4:	f7ff fff0 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4904      	ldr	r1, [pc, #16]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	08005a84 	.word	0x08005a84

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002310:	f7ff ffda 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08005a84 	.word	0x08005a84

08002338 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800233e:	4b1e      	ldr	r3, [pc, #120]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3301      	adds	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d10c      	bne.n	8002376 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002366:	68d2      	ldr	r2, [r2, #12]
 8002368:	0a12      	lsrs	r2, r2, #8
 800236a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
    break;
 8002374:	e00c      	b.n	8002390 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002380:	68d2      	ldr	r2, [r2, #12]
 8002382:	0a12      	lsrs	r2, r2, #8
 8002384:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
    break;
 800238e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0e5b      	lsrs	r3, r3, #25
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	3301      	adds	r3, #1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023aa:	687b      	ldr	r3, [r7, #4]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000
 80023bc:	016e3600 	.word	0x016e3600
 80023c0:	00f42400 	.word	0x00f42400

080023c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023cc:	2300      	movs	r3, #0
 80023ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d0:	2300      	movs	r3, #0
 80023d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8098 	beq.w	8002512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b43      	ldr	r3, [pc, #268]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b40      	ldr	r3, [pc, #256]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	4a3f      	ldr	r2, [pc, #252]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240a:	2301      	movs	r3, #1
 800240c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240e:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800241a:	f7fe fe77 	bl	800110c <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002420:	e009      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fe73 	bl	800110c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d902      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	74fb      	strb	r3, [r7, #19]
        break;
 8002434:	e005      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002436:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ef      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d159      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002448:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002452:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01e      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	d019      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800246e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002476:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002480:	4b1c      	ldr	r3, [pc, #112]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	4a1b      	ldr	r2, [pc, #108]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002490:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe33 	bl	800110c <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a8:	e00b      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fe2f 	bl	800110c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d902      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	74fb      	strb	r3, [r7, #19]
            break;
 80024c0:	e006      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ec      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d6:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e4:	4903      	ldr	r1, [pc, #12]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024ec:	e008      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	74bb      	strb	r3, [r7, #18]
 80024f2:	e005      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002500:	7c7b      	ldrb	r3, [r7, #17]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4ba7      	ldr	r3, [pc, #668]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	4aa6      	ldr	r2, [pc, #664]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002510:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251e:	4ba1      	ldr	r3, [pc, #644]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	f023 0203 	bic.w	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	499d      	ldr	r1, [pc, #628]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002540:	4b98      	ldr	r3, [pc, #608]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f023 020c 	bic.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4995      	ldr	r1, [pc, #596]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002562:	4b90      	ldr	r3, [pc, #576]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002568:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	498c      	ldr	r1, [pc, #560]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002584:	4b87      	ldr	r3, [pc, #540]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	4984      	ldr	r1, [pc, #528]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a6:	4b7f      	ldr	r3, [pc, #508]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	497b      	ldr	r1, [pc, #492]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c8:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4973      	ldr	r1, [pc, #460]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ea:	4b6e      	ldr	r3, [pc, #440]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	496a      	ldr	r1, [pc, #424]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800260c:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4962      	ldr	r1, [pc, #392]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800262e:	4b5d      	ldr	r3, [pc, #372]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002634:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	4959      	ldr	r1, [pc, #356]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002650:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	4951      	ldr	r1, [pc, #324]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002672:	4b4c      	ldr	r3, [pc, #304]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002678:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	4948      	ldr	r1, [pc, #288]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4940      	ldr	r1, [pc, #256]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026b2:	d105      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b4:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a3a      	ldr	r2, [pc, #232]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d015      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026cc:	4b35      	ldr	r3, [pc, #212]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026da:	4932      	ldr	r1, [pc, #200]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ea:	d105      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ec:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a2c      	ldr	r2, [pc, #176]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002704:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002712:	4924      	ldr	r1, [pc, #144]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002722:	d105      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a1e      	ldr	r2, [pc, #120]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800272e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002742:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274a:	4916      	ldr	r1, [pc, #88]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800275a:	d105      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a10      	ldr	r2, [pc, #64]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002766:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d019      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a02      	ldr	r2, [pc, #8]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e002      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027b4:	4b29      	ldr	r3, [pc, #164]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	4926      	ldr	r1, [pc, #152]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027d2:	d105      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027d4:	4b21      	ldr	r3, [pc, #132]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a20      	ldr	r2, [pc, #128]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	4918      	ldr	r1, [pc, #96]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800280c:	4b13      	ldr	r3, [pc, #76]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a12      	ldr	r2, [pc, #72]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002816:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002824:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800282a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	490a      	ldr	r1, [pc, #40]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002842:	d105      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a04      	ldr	r2, [pc, #16]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800284e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002850:	7cbb      	ldrb	r3, [r7, #18]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e09d      	b.n	80029ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	2b00      	cmp	r3, #0
 8002878:	d108      	bne.n	800288c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002882:	d009      	beq.n	8002898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
 800288a:	e005      	b.n	8002898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fa08 	bl	8000cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028d8:	d902      	bls.n	80028e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e002      	b.n	80028e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80028ee:	d007      	beq.n	8002900 <HAL_SPI_Init+0xa0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002942:	ea42 0103 	orr.w	r1, r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0204 	and.w	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800297c:	ea42 0103 	orr.w	r1, r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029d0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029d8:	7dbb      	ldrb	r3, [r7, #22]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d00d      	beq.n	80029fa <HAL_SPI_TransmitReceive_IT+0x42>
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e4:	d106      	bne.n	80029f4 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_SPI_TransmitReceive_IT+0x3c>
 80029ee:	7dbb      	ldrb	r3, [r7, #22]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029f8:	e07d      	b.n	8002af6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_SPI_TransmitReceive_IT+0x54>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_TransmitReceive_IT+0x54>
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a10:	e071      	b.n	8002af6 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_SPI_TransmitReceive_IT+0x68>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e06b      	b.n	8002af8 <HAL_SPI_TransmitReceive_IT+0x140>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d003      	beq.n	8002a3c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2205      	movs	r2, #5
 8002a38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	887a      	ldrh	r2, [r7, #2]
 8002a52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a72:	d906      	bls.n	8002a82 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a23      	ldr	r2, [pc, #140]	@ (8002b04 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002a78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002a7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a80:	e005      	b.n	8002a8e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <HAL_SPI_TransmitReceive_IT+0x154>)
 8002a86:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a21      	ldr	r2, [pc, #132]	@ (8002b10 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002a8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a96:	d802      	bhi.n	8002a9e <HAL_SPI_TransmitReceive_IT+0xe6>
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d908      	bls.n	8002ab0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	e007      	b.n	8002ac0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002abe:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	d007      	beq.n	8002ade <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002af4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	08002e9f 	.word	0x08002e9f
 8002b08:	08002f05 	.word	0x08002f05
 8002b0c:	08002d4f 	.word	0x08002d4f
 8002b10:	08002e0d 	.word	0x08002e0d

08002b14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
    return;
 8002b52:	e0ce      	b.n	8002cf2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_SPI_IRQHandler+0x5e>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
    return;
 8002b70:	e0bf      	b.n	8002cf2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_SPI_IRQHandler+0x7e>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80b0 	beq.w	8002cf2 <HAL_SPI_IRQHandler+0x1de>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80aa 	beq.w	8002cf2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d023      	beq.n	8002bf0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d011      	beq.n	8002bd8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
        return;
 8002bee:	e080      	b.n	8002cf2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c32:	f043 0208 	orr.w	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d04f      	beq.n	8002cf0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c5e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <HAL_SPI_IRQHandler+0x168>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d034      	beq.n	8002ce6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0203 	bic.w	r2, r2, #3
 8002c8a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d011      	beq.n	8002cb8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c98:	4a17      	ldr	r2, [pc, #92]	@ (8002cf8 <HAL_SPI_IRQHandler+0x1e4>)
 8002c9a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fb70 	bl	8001386 <HAL_DMA_Abort_IT>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d016      	beq.n	8002cee <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_SPI_IRQHandler+0x1e4>)
 8002cc6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fb5a 	bl	8001386 <HAL_DMA_Abort_IT>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002ce4:	e003      	b.n	8002cee <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f812 	bl	8002d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cec:	e000      	b.n	8002cf0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002cee:	bf00      	nop
    return;
 8002cf0:	bf00      	nop
  }
}
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	08002d25 	.word	0x08002d25

08002cfc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ffe5 	bl	8002d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d923      	bls.n	8002daa <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b02      	subs	r3, #2
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d11f      	bne.n	8002dd8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e016      	b.n	8002dd8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f103 020c 	add.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002df2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa14 	bl	800322c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d912      	bls.n	8002e44 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2e:	1c9a      	adds	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b02      	subs	r3, #2
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e42:	e012      	b.n	8002e6a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	7812      	ldrb	r2, [r2, #0]
 8002e50:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d110      	bne.n	8002e96 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e82:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f9cb 	bl	800322c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f998 	bl	800322c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d110      	bne.n	8002f5c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f48:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f968 	bl	800322c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f74:	f7fe f8ca 	bl	800110c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4413      	add	r3, r2
 8002f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f84:	f7fe f8c2 	bl	800110c <HAL_GetTick>
 8002f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f8a:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	0d1b      	lsrs	r3, r3, #20
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f9a:	e054      	b.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d050      	beq.n	8003046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fa4:	f7fe f8b2 	bl	800110c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d902      	bls.n	8002fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d13d      	bne.n	8003036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd2:	d111      	bne.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fdc:	d004      	beq.n	8002fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d107      	bne.n	8002ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003000:	d10f      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e017      	b.n	8003066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3b01      	subs	r3, #1
 8003044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d19b      	bne.n	8002f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000004 	.word	0x20000004

08003074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003086:	f7fe f841 	bl	800110c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	4413      	add	r3, r2
 8003094:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003096:	f7fe f839 	bl	800110c <HAL_GetTick>
 800309a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030a4:	4b3d      	ldr	r3, [pc, #244]	@ (800319c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	0d1b      	lsrs	r3, r3, #20
 80030b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030bc:	e060      	b.n	8003180 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030c4:	d107      	bne.n	80030d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d050      	beq.n	8003180 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030de:	f7fe f815 	bl	800110c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d902      	bls.n	80030f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13d      	bne.n	8003170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800310c:	d111      	bne.n	8003132 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003116:	d004      	beq.n	8003122 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003120:	d107      	bne.n	8003132 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313a:	d10f      	bne.n	800315c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800315a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e010      	b.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3b01      	subs	r3, #1
 800317e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d196      	bne.n	80030be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3728      	adds	r7, #40	@ 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000004 	.word	0x20000004

080031a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff ff5b 	bl	8003074 <SPI_WaitFifoStateUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e027      	b.n	8003224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	2180      	movs	r1, #128	@ 0x80
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff fec0 	bl	8002f64 <SPI_WaitFlagStateUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e014      	b.n	8003224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff ff34 	bl	8003074 <SPI_WaitFifoStateUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	f043 0220 	orr.w	r2, r3, #32
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e000      	b.n	8003224 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003234:	f7fd ff6a 	bl	800110c <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0220 	bic.w	r2, r2, #32
 8003248:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	2164      	movs	r1, #100	@ 0x64
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffa6 	bl	80031a0 <SPI_EndRxTxTransaction>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	2b00      	cmp	r3, #0
 800326c:	d115      	bne.n	800329a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b04      	cmp	r3, #4
 8003278:	d107      	bne.n	800328a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fd3a 	bl	8002cfc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003288:	e00e      	b.n	80032a8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fc4c 	bl	8000b30 <HAL_SPI_TxRxCpltCallback>
}
 8003298:	e006      	b.n	80032a8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fd34 	bl	8002d10 <HAL_SPI_ErrorCallback>
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e049      	b.n	8003356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fd42 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fb3c 	bl	800396c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d001      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e054      	b.n	8003422 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a26      	ldr	r2, [pc, #152]	@ (8003430 <HAL_TIM_Base_Start_IT+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d01d      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a22      	ldr	r2, [pc, #136]	@ (8003434 <HAL_TIM_Base_Start_IT+0xd4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a21      	ldr	r2, [pc, #132]	@ (8003438 <HAL_TIM_Base_Start_IT+0xd8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_TIM_Base_Start_IT+0xdc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003440 <HAL_TIM_Base_Start_IT+0xe0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_TIM_Base_Start_IT+0xe4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x80>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_TIM_Base_Start_IT+0xe8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d115      	bne.n	800340c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_TIM_Base_Start_IT+0xec>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d015      	beq.n	800341e <HAL_TIM_Base_Start_IT+0xbe>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d011      	beq.n	800341e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	e008      	b.n	800341e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e000      	b.n	8003420 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40013400 	.word	0x40013400
 8003444:	40014000 	.word	0x40014000
 8003448:	40015000 	.word	0x40015000
 800344c:	00010007 	.word	0x00010007

08003450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d020      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0202 	mvn.w	r2, #2
 8003484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa48 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa3a 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fa4b 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d020      	beq.n	8003500 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0204 	mvn.w	r2, #4
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa22 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa14 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fa25 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d020      	beq.n	800354c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01b      	beq.n	800354c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0208 	mvn.w	r2, #8
 800351c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2204      	movs	r2, #4
 8003522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9fc 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 8003538:	e005      	b.n	8003546 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9ee 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f9ff 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d020      	beq.n	8003598 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0210 	mvn.w	r2, #16
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2208      	movs	r2, #8
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f9d6 	bl	8003930 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9c8 	bl	800391c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f9d9 	bl	8003944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0201 	mvn.w	r2, #1
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd faca 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00c      	beq.n	80035ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80035e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fbb1 	bl	8003d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fba9 	bl	8003d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f993 	bl	8003958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00c      	beq.n	8003656 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0220 	mvn.w	r2, #32
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fb71 	bl	8003d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00c      	beq.n	800367a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb7d 	bl	8003d74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fb75 	bl	8003d88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00c      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80036ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb6d 	bl	8003d9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fb65 	bl	8003db0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIM_ConfigClockSource+0x1c>
 8003708:	2302      	movs	r3, #2
 800370a:	e0f6      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x20a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800372a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800372e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6f      	ldr	r2, [pc, #444]	@ (8003904 <HAL_TIM_ConfigClockSource+0x214>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f000 80c1 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800374c:	4a6d      	ldr	r2, [pc, #436]	@ (8003904 <HAL_TIM_ConfigClockSource+0x214>)
 800374e:	4293      	cmp	r3, r2
 8003750:	f200 80c6 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	4a6c      	ldr	r2, [pc, #432]	@ (8003908 <HAL_TIM_ConfigClockSource+0x218>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f000 80b9 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800375c:	4a6a      	ldr	r2, [pc, #424]	@ (8003908 <HAL_TIM_ConfigClockSource+0x218>)
 800375e:	4293      	cmp	r3, r2
 8003760:	f200 80be 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003764:	4a69      	ldr	r2, [pc, #420]	@ (800390c <HAL_TIM_ConfigClockSource+0x21c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	f000 80b1 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800376c:	4a67      	ldr	r2, [pc, #412]	@ (800390c <HAL_TIM_ConfigClockSource+0x21c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	f200 80b6 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003774:	4a66      	ldr	r2, [pc, #408]	@ (8003910 <HAL_TIM_ConfigClockSource+0x220>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f000 80a9 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800377c:	4a64      	ldr	r2, [pc, #400]	@ (8003910 <HAL_TIM_ConfigClockSource+0x220>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f200 80ae 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003784:	4a63      	ldr	r2, [pc, #396]	@ (8003914 <HAL_TIM_ConfigClockSource+0x224>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f000 80a1 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800378c:	4a61      	ldr	r2, [pc, #388]	@ (8003914 <HAL_TIM_ConfigClockSource+0x224>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f200 80a6 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003794:	4a60      	ldr	r2, [pc, #384]	@ (8003918 <HAL_TIM_ConfigClockSource+0x228>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f000 8099 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800379c:	4a5e      	ldr	r2, [pc, #376]	@ (8003918 <HAL_TIM_ConfigClockSource+0x228>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f200 809e 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037a8:	f000 8091 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 80037ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037b0:	f200 8096 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b8:	f000 8089 	beq.w	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 80037bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037c0:	f200 808e 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c8:	d03e      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0x158>
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ce:	f200 8087 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037d6:	f000 8086 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037de:	d87f      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e0:	2b70      	cmp	r3, #112	@ 0x70
 80037e2:	d01a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x12a>
 80037e4:	2b70      	cmp	r3, #112	@ 0x70
 80037e6:	d87b      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e8:	2b60      	cmp	r3, #96	@ 0x60
 80037ea:	d050      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x19e>
 80037ec:	2b60      	cmp	r3, #96	@ 0x60
 80037ee:	d877      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f0:	2b50      	cmp	r3, #80	@ 0x50
 80037f2:	d03c      	beq.n	800386e <HAL_TIM_ConfigClockSource+0x17e>
 80037f4:	2b50      	cmp	r3, #80	@ 0x50
 80037f6:	d873      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f8:	2b40      	cmp	r3, #64	@ 0x40
 80037fa:	d058      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x1be>
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d86f      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003800:	2b30      	cmp	r3, #48	@ 0x30
 8003802:	d064      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 8003804:	2b30      	cmp	r3, #48	@ 0x30
 8003806:	d86b      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d060      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d867      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d05a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x1de>
 8003818:	e062      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800382a:	f000 f9cf 	bl	8003bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800383c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]
      break;
 8003846:	e04f      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003858:	f000 f9b8 	bl	8003bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800386a:	609a      	str	r2, [r3, #8]
      break;
 800386c:	e03c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	461a      	mov	r2, r3
 800387c:	f000 f92a 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2150      	movs	r1, #80	@ 0x50
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f983 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 800388c:	e02c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389a:	461a      	mov	r2, r3
 800389c:	f000 f949 	bl	8003b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2160      	movs	r1, #96	@ 0x60
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f973 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80038ac:	e01c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 f90a 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2140      	movs	r1, #64	@ 0x40
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f963 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80038cc:	e00c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 f95a 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80038de:	e003      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e000      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80038e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	00100070 	.word	0x00100070
 8003908:	00100060 	.word	0x00100060
 800390c:	00100050 	.word	0x00100050
 8003910:	00100040 	.word	0x00100040
 8003914:	00100030 	.word	0x00100030
 8003918:	00100020 	.word	0x00100020

0800391c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab0 <TIM_Base_SetConfig+0x144>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d017      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398a:	d013      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a49      	ldr	r2, [pc, #292]	@ (8003ab4 <TIM_Base_SetConfig+0x148>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a48      	ldr	r2, [pc, #288]	@ (8003ab8 <TIM_Base_SetConfig+0x14c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a47      	ldr	r2, [pc, #284]	@ (8003abc <TIM_Base_SetConfig+0x150>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a46      	ldr	r2, [pc, #280]	@ (8003ac0 <TIM_Base_SetConfig+0x154>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a45      	ldr	r2, [pc, #276]	@ (8003ac4 <TIM_Base_SetConfig+0x158>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a39      	ldr	r2, [pc, #228]	@ (8003ab0 <TIM_Base_SetConfig+0x144>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d023      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d4:	d01f      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a36      	ldr	r2, [pc, #216]	@ (8003ab4 <TIM_Base_SetConfig+0x148>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01b      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <TIM_Base_SetConfig+0x14c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a34      	ldr	r2, [pc, #208]	@ (8003abc <TIM_Base_SetConfig+0x150>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a33      	ldr	r2, [pc, #204]	@ (8003ac0 <TIM_Base_SetConfig+0x154>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a33      	ldr	r2, [pc, #204]	@ (8003ac8 <TIM_Base_SetConfig+0x15c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a32      	ldr	r2, [pc, #200]	@ (8003acc <TIM_Base_SetConfig+0x160>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a31      	ldr	r2, [pc, #196]	@ (8003ad0 <TIM_Base_SetConfig+0x164>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac4 <TIM_Base_SetConfig+0x158>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <TIM_Base_SetConfig+0x144>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac0 <TIM_Base_SetConfig+0x154>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00f      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac8 <TIM_Base_SetConfig+0x15c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <TIM_Base_SetConfig+0x160>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <TIM_Base_SetConfig+0x164>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x110>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <TIM_Base_SetConfig+0x158>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d103      	bne.n	8003a84 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40013400 	.word	0x40013400
 8003ac4:	40015000 	.word	0x40015000
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0201 	bic.w	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 030a 	bic.w	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f023 0210 	bic.w	r2, r3, #16
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f043 0307 	orr.w	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e074      	b.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a34      	ldr	r2, [pc, #208]	@ (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a33      	ldr	r2, [pc, #204]	@ (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a31      	ldr	r2, [pc, #196]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a21      	ldr	r2, [pc, #132]	@ (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1f      	ldr	r2, [pc, #124]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d018      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a15      	ldr	r2, [pc, #84]	@ (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a11      	ldr	r2, [pc, #68]	@ (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10c      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40012c00 	.word	0x40012c00
 8003d20:	40013400 	.word	0x40013400
 8003d24:	40015000 	.word	0x40015000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40014000 	.word	0x40014000

08003d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e042      	b.n	8003e5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fc ff15 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2224      	movs	r2, #36	@ 0x24
 8003df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fb24 	bl	800445c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f825 	bl	8003e64 <UART_SetConfig>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e01b      	b.n	8003e5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fba3 	bl	80045a0 <UART_CheckIdleState>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b08c      	sub	sp, #48	@ 0x30
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4baa      	ldr	r3, [pc, #680]	@ (800413c <UART_SetConfig+0x2d8>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a9f      	ldr	r2, [pc, #636]	@ (8004140 <UART_SetConfig+0x2dc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003eda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eee:	f023 010f 	bic.w	r1, r3, #15
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a90      	ldr	r2, [pc, #576]	@ (8004144 <UART_SetConfig+0x2e0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d125      	bne.n	8003f54 <UART_SetConfig+0xf0>
 8003f08:	4b8f      	ldr	r3, [pc, #572]	@ (8004148 <UART_SetConfig+0x2e4>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d81a      	bhi.n	8003f4c <UART_SetConfig+0xe8>
 8003f16:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <UART_SetConfig+0xb8>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	e116      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3a:	e112      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f42:	e10e      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4a:	e10a      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f52:	e106      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a7c      	ldr	r2, [pc, #496]	@ (800414c <UART_SetConfig+0x2e8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d138      	bne.n	8003fd0 <UART_SetConfig+0x16c>
 8003f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8004148 <UART_SetConfig+0x2e4>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d82d      	bhi.n	8003fc8 <UART_SetConfig+0x164>
 8003f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <UART_SetConfig+0x110>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fc9 	.word	0x08003fc9
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08003fc9 	.word	0x08003fc9
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	08003fc9 	.word	0x08003fc9
 8003f8c:	08003fc9 	.word	0x08003fc9
 8003f90:	08003fc9 	.word	0x08003fc9
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	08003fc9 	.word	0x08003fc9
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003fc1 	.word	0x08003fc1
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fae:	e0d8      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fb6:	e0d4      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fbe:	e0d0      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fc6:	e0cc      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fce:	e0c8      	b.n	8004162 <UART_SetConfig+0x2fe>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8004150 <UART_SetConfig+0x2ec>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d125      	bne.n	8004026 <UART_SetConfig+0x1c2>
 8003fda:	4b5b      	ldr	r3, [pc, #364]	@ (8004148 <UART_SetConfig+0x2e4>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fe4:	2b30      	cmp	r3, #48	@ 0x30
 8003fe6:	d016      	beq.n	8004016 <UART_SetConfig+0x1b2>
 8003fe8:	2b30      	cmp	r3, #48	@ 0x30
 8003fea:	d818      	bhi.n	800401e <UART_SetConfig+0x1ba>
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d00a      	beq.n	8004006 <UART_SetConfig+0x1a2>
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d814      	bhi.n	800401e <UART_SetConfig+0x1ba>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <UART_SetConfig+0x19a>
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d008      	beq.n	800400e <UART_SetConfig+0x1aa>
 8003ffc:	e00f      	b.n	800401e <UART_SetConfig+0x1ba>
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004004:	e0ad      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004006:	2302      	movs	r3, #2
 8004008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400c:	e0a9      	b.n	8004162 <UART_SetConfig+0x2fe>
 800400e:	2304      	movs	r3, #4
 8004010:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004014:	e0a5      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004016:	2308      	movs	r3, #8
 8004018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800401c:	e0a1      	b.n	8004162 <UART_SetConfig+0x2fe>
 800401e:	2310      	movs	r3, #16
 8004020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004024:	e09d      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a4a      	ldr	r2, [pc, #296]	@ (8004154 <UART_SetConfig+0x2f0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d125      	bne.n	800407c <UART_SetConfig+0x218>
 8004030:	4b45      	ldr	r3, [pc, #276]	@ (8004148 <UART_SetConfig+0x2e4>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800403a:	2bc0      	cmp	r3, #192	@ 0xc0
 800403c:	d016      	beq.n	800406c <UART_SetConfig+0x208>
 800403e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004040:	d818      	bhi.n	8004074 <UART_SetConfig+0x210>
 8004042:	2b80      	cmp	r3, #128	@ 0x80
 8004044:	d00a      	beq.n	800405c <UART_SetConfig+0x1f8>
 8004046:	2b80      	cmp	r3, #128	@ 0x80
 8004048:	d814      	bhi.n	8004074 <UART_SetConfig+0x210>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <UART_SetConfig+0x1f0>
 800404e:	2b40      	cmp	r3, #64	@ 0x40
 8004050:	d008      	beq.n	8004064 <UART_SetConfig+0x200>
 8004052:	e00f      	b.n	8004074 <UART_SetConfig+0x210>
 8004054:	2300      	movs	r3, #0
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800405a:	e082      	b.n	8004162 <UART_SetConfig+0x2fe>
 800405c:	2302      	movs	r3, #2
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004062:	e07e      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004064:	2304      	movs	r3, #4
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800406a:	e07a      	b.n	8004162 <UART_SetConfig+0x2fe>
 800406c:	2308      	movs	r3, #8
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004072:	e076      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004074:	2310      	movs	r3, #16
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407a:	e072      	b.n	8004162 <UART_SetConfig+0x2fe>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a35      	ldr	r2, [pc, #212]	@ (8004158 <UART_SetConfig+0x2f4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d12a      	bne.n	80040dc <UART_SetConfig+0x278>
 8004086:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <UART_SetConfig+0x2e4>)
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004094:	d01a      	beq.n	80040cc <UART_SetConfig+0x268>
 8004096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800409a:	d81b      	bhi.n	80040d4 <UART_SetConfig+0x270>
 800409c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a0:	d00c      	beq.n	80040bc <UART_SetConfig+0x258>
 80040a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040a6:	d815      	bhi.n	80040d4 <UART_SetConfig+0x270>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <UART_SetConfig+0x250>
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b0:	d008      	beq.n	80040c4 <UART_SetConfig+0x260>
 80040b2:	e00f      	b.n	80040d4 <UART_SetConfig+0x270>
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ba:	e052      	b.n	8004162 <UART_SetConfig+0x2fe>
 80040bc:	2302      	movs	r3, #2
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c2:	e04e      	b.n	8004162 <UART_SetConfig+0x2fe>
 80040c4:	2304      	movs	r3, #4
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ca:	e04a      	b.n	8004162 <UART_SetConfig+0x2fe>
 80040cc:	2308      	movs	r3, #8
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d2:	e046      	b.n	8004162 <UART_SetConfig+0x2fe>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040da:	e042      	b.n	8004162 <UART_SetConfig+0x2fe>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <UART_SetConfig+0x2dc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d13a      	bne.n	800415c <UART_SetConfig+0x2f8>
 80040e6:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <UART_SetConfig+0x2e4>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040f4:	d01a      	beq.n	800412c <UART_SetConfig+0x2c8>
 80040f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040fa:	d81b      	bhi.n	8004134 <UART_SetConfig+0x2d0>
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004100:	d00c      	beq.n	800411c <UART_SetConfig+0x2b8>
 8004102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004106:	d815      	bhi.n	8004134 <UART_SetConfig+0x2d0>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <UART_SetConfig+0x2b0>
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d008      	beq.n	8004124 <UART_SetConfig+0x2c0>
 8004112:	e00f      	b.n	8004134 <UART_SetConfig+0x2d0>
 8004114:	2300      	movs	r3, #0
 8004116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411a:	e022      	b.n	8004162 <UART_SetConfig+0x2fe>
 800411c:	2302      	movs	r3, #2
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004122:	e01e      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004124:	2304      	movs	r3, #4
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412a:	e01a      	b.n	8004162 <UART_SetConfig+0x2fe>
 800412c:	2308      	movs	r3, #8
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004132:	e016      	b.n	8004162 <UART_SetConfig+0x2fe>
 8004134:	2310      	movs	r3, #16
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413a:	e012      	b.n	8004162 <UART_SetConfig+0x2fe>
 800413c:	cfff69f3 	.word	0xcfff69f3
 8004140:	40008000 	.word	0x40008000
 8004144:	40013800 	.word	0x40013800
 8004148:	40021000 	.word	0x40021000
 800414c:	40004400 	.word	0x40004400
 8004150:	40004800 	.word	0x40004800
 8004154:	40004c00 	.word	0x40004c00
 8004158:	40005000 	.word	0x40005000
 800415c:	2310      	movs	r3, #16
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4aae      	ldr	r2, [pc, #696]	@ (8004420 <UART_SetConfig+0x5bc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	f040 8097 	bne.w	800429c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800416e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004172:	2b08      	cmp	r3, #8
 8004174:	d823      	bhi.n	80041be <UART_SetConfig+0x35a>
 8004176:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <UART_SetConfig+0x318>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041bf 	.word	0x080041bf
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041bf 	.word	0x080041bf
 800418c:	080041af 	.word	0x080041af
 8004190:	080041bf 	.word	0x080041bf
 8004194:	080041bf 	.word	0x080041bf
 8004198:	080041bf 	.word	0x080041bf
 800419c:	080041b7 	.word	0x080041b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fe f89e 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 80041a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041a6:	e010      	b.n	80041ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004424 <UART_SetConfig+0x5c0>)
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041ac:	e00d      	b.n	80041ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ae:	f7fe f829 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80041b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041b4:	e009      	b.n	80041ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041bc:	e005      	b.n	80041ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8130 	beq.w	8004432 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	4a94      	ldr	r2, [pc, #592]	@ (8004428 <UART_SetConfig+0x5c4>)
 80041d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041dc:	461a      	mov	r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d305      	bcc.n	8004202 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d903      	bls.n	800420a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004208:	e113      	b.n	8004432 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	2200      	movs	r2, #0
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	60fa      	str	r2, [r7, #12]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	4a84      	ldr	r2, [pc, #528]	@ (8004428 <UART_SetConfig+0x5c4>)
 8004218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800421c:	b29b      	uxth	r3, r3
 800421e:	2200      	movs	r2, #0
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800422c:	f7fc f848 	bl	80002c0 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	020b      	lsls	r3, r1, #8
 8004242:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004246:	0202      	lsls	r2, r0, #8
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	6849      	ldr	r1, [r1, #4]
 800424c:	0849      	lsrs	r1, r1, #1
 800424e:	2000      	movs	r0, #0
 8004250:	460c      	mov	r4, r1
 8004252:	4605      	mov	r5, r0
 8004254:	eb12 0804 	adds.w	r8, r2, r4
 8004258:	eb43 0905 	adc.w	r9, r3, r5
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	469a      	mov	sl, r3
 8004264:	4693      	mov	fp, r2
 8004266:	4652      	mov	r2, sl
 8004268:	465b      	mov	r3, fp
 800426a:	4640      	mov	r0, r8
 800426c:	4649      	mov	r1, r9
 800426e:	f7fc f827 	bl	80002c0 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4613      	mov	r3, r2
 8004278:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004280:	d308      	bcc.n	8004294 <UART_SetConfig+0x430>
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004288:	d204      	bcs.n	8004294 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a3a      	ldr	r2, [r7, #32]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	e0ce      	b.n	8004432 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800429a:	e0ca      	b.n	8004432 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a4:	d166      	bne.n	8004374 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80042a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d827      	bhi.n	80042fe <UART_SetConfig+0x49a>
 80042ae:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <UART_SetConfig+0x450>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ff 	.word	0x080042ff
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe f802 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 80042dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042de:	e014      	b.n	800430a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fe f814 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80042e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042e6:	e010      	b.n	800430a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004424 <UART_SetConfig+0x5c0>)
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042ec:	e00d      	b.n	800430a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fd ff89 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80042f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042f4:	e009      	b.n	800430a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042fc:	e005      	b.n	800430a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8090 	beq.w	8004432 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	4a44      	ldr	r2, [pc, #272]	@ (8004428 <UART_SetConfig+0x5c4>)
 8004318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431c:	461a      	mov	r2, r3
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	fbb3 f3f2 	udiv	r3, r3, r2
 8004324:	005a      	lsls	r2, r3, #1
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	441a      	add	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d916      	bls.n	800436c <UART_SetConfig+0x508>
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004344:	d212      	bcs.n	800436c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f023 030f 	bic.w	r3, r3, #15
 800434e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	b29a      	uxth	r2, r3
 800435c:	8bfb      	ldrh	r3, [r7, #30]
 800435e:	4313      	orrs	r3, r2
 8004360:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	8bfa      	ldrh	r2, [r7, #30]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e062      	b.n	8004432 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004372:	e05e      	b.n	8004432 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004374:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004378:	2b08      	cmp	r3, #8
 800437a:	d828      	bhi.n	80043ce <UART_SetConfig+0x56a>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <UART_SetConfig+0x520>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fd ff9a 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 80043ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043ae:	e014      	b.n	80043da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fd ffac 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80043b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <UART_SetConfig+0x5c0>)
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043bc:	e00d      	b.n	80043da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fd ff21 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80043c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043c4:	e009      	b.n	80043da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043cc:	e005      	b.n	80043da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043d8:	bf00      	nop
    }

    if (pclk != 0U)
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d028      	beq.n	8004432 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	4a10      	ldr	r2, [pc, #64]	@ (8004428 <UART_SetConfig+0x5c4>)
 80043e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ea:	461a      	mov	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	441a      	add	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d910      	bls.n	800442c <UART_SetConfig+0x5c8>
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004410:	d20c      	bcs.n	800442c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	b29a      	uxth	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	e009      	b.n	8004432 <UART_SetConfig+0x5ce>
 800441e:	bf00      	nop
 8004420:	40008000 	.word	0x40008000
 8004424:	00f42400 	.word	0x00f42400
 8004428:	08005a8c 	.word	0x08005a8c
      }
      else
      {
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2201      	movs	r2, #1
 8004436:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2201      	movs	r2, #1
 800443e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2200      	movs	r2, #0
 800444c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800444e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004452:	4618      	mov	r0, r3
 8004454:	3730      	adds	r7, #48	@ 0x30
 8004456:	46bd      	mov	sp, r7
 8004458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800445c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01a      	beq.n	8004572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800455a:	d10a      	bne.n	8004572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b098      	sub	sp, #96	@ 0x60
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b0:	f7fc fdac 	bl	800110c <HAL_GetTick>
 80045b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d12f      	bne.n	8004624 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045cc:	2200      	movs	r2, #0
 80045ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f88e 	bl	80046f4 <UART_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d022      	beq.n	8004624 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800460a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e6      	bne.n	80045de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e063      	b.n	80046ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d149      	bne.n	80046c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004632:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463a:	2200      	movs	r2, #0
 800463c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f857 	bl	80046f4 <UART_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d03c      	beq.n	80046c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	623b      	str	r3, [r7, #32]
   return(result);
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800466a:	633b      	str	r3, [r7, #48]	@ 0x30
 800466c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e6      	bne.n	800464c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3308      	adds	r3, #8
 8004684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60fb      	str	r3, [r7, #12]
   return(result);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3308      	adds	r3, #8
 800469c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800469e:	61fa      	str	r2, [r7, #28]
 80046a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	69b9      	ldr	r1, [r7, #24]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	617b      	str	r3, [r7, #20]
   return(result);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e5      	bne.n	800467e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e012      	b.n	80046ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3758      	adds	r7, #88	@ 0x58
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004704:	e04f      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d04b      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fc fcfd 	bl	800110c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <UART_WaitOnFlagUntilTimeout+0x30>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e04e      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d037      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b80      	cmp	r3, #128	@ 0x80
 800473a:	d034      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	d031      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b08      	cmp	r3, #8
 800474e:	d110      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2208      	movs	r2, #8
 8004756:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f838 	bl	80047ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2208      	movs	r2, #8
 8004762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e029      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800477c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004780:	d111      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800478a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f81e 	bl	80047ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d0a0      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b095      	sub	sp, #84	@ 0x54
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e6      	bne.n	80047d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3308      	adds	r3, #8
 800480e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	61fb      	str	r3, [r7, #28]
   return(result);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800482c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e3      	bne.n	8004808 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d118      	bne.n	800487a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	60bb      	str	r3, [r7, #8]
   return(result);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f023 0310 	bic.w	r3, r3, #16
 800485c:	647b      	str	r3, [r7, #68]	@ 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e6      	bne.n	8004848 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800488e:	bf00      	nop
 8004890:	3754      	adds	r7, #84	@ 0x54
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e027      	b.n	8004900 <HAL_UARTEx_DisableFifoMode+0x66>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	@ 0x24
 80048bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80048de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e02d      	b.n	8004980 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f84f 	bl	8004a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800499c:	2302      	movs	r3, #2
 800499e:	e02d      	b.n	80049fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	@ 0x24
 80049ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f811 	bl	8004a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d108      	bne.n	8004a26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a24:	e031      	b.n	8004a8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a26:	2308      	movs	r3, #8
 8004a28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	0e5b      	lsrs	r3, r3, #25
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	0f5b      	lsrs	r3, r3, #29
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a4e:	7bbb      	ldrb	r3, [r7, #14]
 8004a50:	7b3a      	ldrb	r2, [r7, #12]
 8004a52:	4911      	ldr	r1, [pc, #68]	@ (8004a98 <UARTEx_SetNbDataToProcess+0x94>)
 8004a54:	5c8a      	ldrb	r2, [r1, r2]
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a5a:	7b3a      	ldrb	r2, [r7, #12]
 8004a5c:	490f      	ldr	r1, [pc, #60]	@ (8004a9c <UARTEx_SetNbDataToProcess+0x98>)
 8004a5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a60:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	7b7a      	ldrb	r2, [r7, #13]
 8004a70:	4909      	ldr	r1, [pc, #36]	@ (8004a98 <UARTEx_SetNbDataToProcess+0x94>)
 8004a72:	5c8a      	ldrb	r2, [r1, r2]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a78:	7b7a      	ldrb	r2, [r7, #13]
 8004a7a:	4908      	ldr	r1, [pc, #32]	@ (8004a9c <UARTEx_SetNbDataToProcess+0x98>)
 8004a7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	08005aa4 	.word	0x08005aa4
 8004a9c:	08005aac 	.word	0x08005aac

08004aa0 <rand>:
 8004aa0:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <rand+0x5c>)
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	681c      	ldr	r4, [r3, #0]
 8004aa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004aa8:	b9b3      	cbnz	r3, 8004ad8 <rand+0x38>
 8004aaa:	2018      	movs	r0, #24
 8004aac:	f000 fa20 	bl	8004ef0 <malloc>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6320      	str	r0, [r4, #48]	@ 0x30
 8004ab4:	b920      	cbnz	r0, 8004ac0 <rand+0x20>
 8004ab6:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <rand+0x60>)
 8004ab8:	4812      	ldr	r0, [pc, #72]	@ (8004b04 <rand+0x64>)
 8004aba:	2152      	movs	r1, #82	@ 0x52
 8004abc:	f000 f9b0 	bl	8004e20 <__assert_func>
 8004ac0:	4911      	ldr	r1, [pc, #68]	@ (8004b08 <rand+0x68>)
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <rand+0x6c>)
 8004ac4:	e9c0 1300 	strd	r1, r3, [r0]
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <rand+0x70>)
 8004aca:	6083      	str	r3, [r0, #8]
 8004acc:	230b      	movs	r3, #11
 8004ace:	8183      	strh	r3, [r0, #12]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ad8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ada:	480e      	ldr	r0, [pc, #56]	@ (8004b14 <rand+0x74>)
 8004adc:	690b      	ldr	r3, [r1, #16]
 8004ade:	694c      	ldr	r4, [r1, #20]
 8004ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <rand+0x78>)
 8004ae2:	4358      	muls	r0, r3
 8004ae4:	fb02 0004 	mla	r0, r2, r4, r0
 8004ae8:	fba3 3202 	umull	r3, r2, r3, r2
 8004aec:	3301      	adds	r3, #1
 8004aee:	eb40 0002 	adc.w	r0, r0, r2
 8004af2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004af6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	2000001c 	.word	0x2000001c
 8004b00:	08005ab4 	.word	0x08005ab4
 8004b04:	08005acb 	.word	0x08005acb
 8004b08:	abcd330e 	.word	0xabcd330e
 8004b0c:	e66d1234 	.word	0xe66d1234
 8004b10:	0005deec 	.word	0x0005deec
 8004b14:	5851f42d 	.word	0x5851f42d
 8004b18:	4c957f2d 	.word	0x4c957f2d

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2a:	6083      	str	r3, [r0, #8]
 8004b2c:	8181      	strh	r1, [r0, #12]
 8004b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b30:	81c2      	strh	r2, [r0, #14]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	@ 0x5c
 8004b3a:	f000 f8f4 	bl	8004d26 <memset>
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <std+0x58>)
 8004b40:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <std+0x5c>)
 8004b44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b46:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <std+0x60>)
 8004b48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <std+0x64>)
 8004b4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <std+0x68>)
 8004b50:	6224      	str	r4, [r4, #32]
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d006      	beq.n	8004b64 <std+0x48>
 8004b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b5a:	4294      	cmp	r4, r2
 8004b5c:	d002      	beq.n	8004b64 <std+0x48>
 8004b5e:	33d0      	adds	r3, #208	@ 0xd0
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d105      	bne.n	8004b70 <std+0x54>
 8004b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6c:	f000 b954 	b.w	8004e18 <__retarget_lock_init_recursive>
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	08004ca1 	.word	0x08004ca1
 8004b78:	08004cc3 	.word	0x08004cc3
 8004b7c:	08004cfb 	.word	0x08004cfb
 8004b80:	08004d1f 	.word	0x08004d1f
 8004b84:	200001f0 	.word	0x200001f0

08004b88 <stdio_exit_handler>:
 8004b88:	4a02      	ldr	r2, [pc, #8]	@ (8004b94 <stdio_exit_handler+0xc>)
 8004b8a:	4903      	ldr	r1, [pc, #12]	@ (8004b98 <stdio_exit_handler+0x10>)
 8004b8c:	4803      	ldr	r0, [pc, #12]	@ (8004b9c <stdio_exit_handler+0x14>)
 8004b8e:	f000 b869 	b.w	8004c64 <_fwalk_sglue>
 8004b92:	bf00      	nop
 8004b94:	20000010 	.word	0x20000010
 8004b98:	08005165 	.word	0x08005165
 8004b9c:	20000020 	.word	0x20000020

08004ba0 <cleanup_stdio>:
 8004ba0:	6841      	ldr	r1, [r0, #4]
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <cleanup_stdio+0x34>)
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d001      	beq.n	8004bb0 <cleanup_stdio+0x10>
 8004bac:	f000 fada 	bl	8005164 <_fflush_r>
 8004bb0:	68a1      	ldr	r1, [r4, #8]
 8004bb2:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <cleanup_stdio+0x38>)
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d002      	beq.n	8004bbe <cleanup_stdio+0x1e>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fad3 	bl	8005164 <_fflush_r>
 8004bbe:	68e1      	ldr	r1, [r4, #12]
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <cleanup_stdio+0x3c>)
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	d004      	beq.n	8004bd0 <cleanup_stdio+0x30>
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f000 baca 	b.w	8005164 <_fflush_r>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200001f0 	.word	0x200001f0
 8004bd8:	20000258 	.word	0x20000258
 8004bdc:	200002c0 	.word	0x200002c0

08004be0 <global_stdio_init.part.0>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <global_stdio_init.part.0+0x30>)
 8004be4:	4c0b      	ldr	r4, [pc, #44]	@ (8004c14 <global_stdio_init.part.0+0x34>)
 8004be6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c18 <global_stdio_init.part.0+0x38>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4620      	mov	r0, r4
 8004bec:	2200      	movs	r2, #0
 8004bee:	2104      	movs	r1, #4
 8004bf0:	f7ff ff94 	bl	8004b1c <std>
 8004bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2109      	movs	r1, #9
 8004bfc:	f7ff ff8e 	bl	8004b1c <std>
 8004c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c04:	2202      	movs	r2, #2
 8004c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	f7ff bf86 	b.w	8004b1c <std>
 8004c10:	20000328 	.word	0x20000328
 8004c14:	200001f0 	.word	0x200001f0
 8004c18:	08004b89 	.word	0x08004b89

08004c1c <__sfp_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__sfp_lock_acquire+0x8>)
 8004c1e:	f000 b8fc 	b.w	8004e1a <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000331 	.word	0x20000331

08004c28 <__sfp_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__sfp_lock_release+0x8>)
 8004c2a:	f000 b8f7 	b.w	8004e1c <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000331 	.word	0x20000331

08004c34 <__sinit>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	f7ff fff0 	bl	8004c1c <__sfp_lock_acquire>
 8004c3c:	6a23      	ldr	r3, [r4, #32]
 8004c3e:	b11b      	cbz	r3, 8004c48 <__sinit+0x14>
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f7ff bff0 	b.w	8004c28 <__sfp_lock_release>
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <__sinit+0x28>)
 8004c4a:	6223      	str	r3, [r4, #32]
 8004c4c:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <__sinit+0x2c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f5      	bne.n	8004c40 <__sinit+0xc>
 8004c54:	f7ff ffc4 	bl	8004be0 <global_stdio_init.part.0>
 8004c58:	e7f2      	b.n	8004c40 <__sinit+0xc>
 8004c5a:	bf00      	nop
 8004c5c:	08004ba1 	.word	0x08004ba1
 8004c60:	20000328 	.word	0x20000328

08004c64 <_fwalk_sglue>:
 8004c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c68:	4607      	mov	r7, r0
 8004c6a:	4688      	mov	r8, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c74:	f1b9 0901 	subs.w	r9, r9, #1
 8004c78:	d505      	bpl.n	8004c86 <_fwalk_sglue+0x22>
 8004c7a:	6824      	ldr	r4, [r4, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d1f7      	bne.n	8004c70 <_fwalk_sglue+0xc>
 8004c80:	4630      	mov	r0, r6
 8004c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d907      	bls.n	8004c9c <_fwalk_sglue+0x38>
 8004c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c90:	3301      	adds	r3, #1
 8004c92:	d003      	beq.n	8004c9c <_fwalk_sglue+0x38>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	4306      	orrs	r6, r0
 8004c9c:	3568      	adds	r5, #104	@ 0x68
 8004c9e:	e7e9      	b.n	8004c74 <_fwalk_sglue+0x10>

08004ca0 <__sread>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	f000 f868 	bl	8004d7c <_read_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	bfab      	itete	ge
 8004cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb4:	181b      	addge	r3, r3, r0
 8004cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cba:	bfac      	ite	ge
 8004cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cbe:	81a3      	strhlt	r3, [r4, #12]
 8004cc0:	bd10      	pop	{r4, pc}

08004cc2 <__swrite>:
 8004cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	05db      	lsls	r3, r3, #23
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	d505      	bpl.n	8004ce0 <__swrite+0x1e>
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	2302      	movs	r3, #2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f000 f83c 	bl	8004d58 <_lseek_r>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	4632      	mov	r2, r6
 8004cee:	463b      	mov	r3, r7
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	f000 b853 	b.w	8004da0 <_write_r>

08004cfa <__sseek>:
 8004cfa:	b510      	push	{r4, lr}
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d02:	f000 f829 	bl	8004d58 <_lseek_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	bf15      	itete	ne
 8004d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d16:	81a3      	strheq	r3, [r4, #12]
 8004d18:	bf18      	it	ne
 8004d1a:	81a3      	strhne	r3, [r4, #12]
 8004d1c:	bd10      	pop	{r4, pc}

08004d1e <__sclose>:
 8004d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d22:	f000 b809 	b.w	8004d38 <_close_r>

08004d26 <memset>:
 8004d26:	4402      	add	r2, r0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d100      	bne.n	8004d30 <memset+0xa>
 8004d2e:	4770      	bx	lr
 8004d30:	f803 1b01 	strb.w	r1, [r3], #1
 8004d34:	e7f9      	b.n	8004d2a <memset+0x4>
	...

08004d38 <_close_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d06      	ldr	r5, [pc, #24]	@ (8004d54 <_close_r+0x1c>)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4604      	mov	r4, r0
 8004d40:	4608      	mov	r0, r1
 8004d42:	602b      	str	r3, [r5, #0]
 8004d44:	f7fc f8d8 	bl	8000ef8 <_close>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_close_r+0x1a>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_close_r+0x1a>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	2000032c 	.word	0x2000032c

08004d58 <_lseek_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d07      	ldr	r5, [pc, #28]	@ (8004d78 <_lseek_r+0x20>)
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	602a      	str	r2, [r5, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f7fc f8ed 	bl	8000f46 <_lseek>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_lseek_r+0x1e>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_lseek_r+0x1e>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	2000032c 	.word	0x2000032c

08004d7c <_read_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4d07      	ldr	r5, [pc, #28]	@ (8004d9c <_read_r+0x20>)
 8004d80:	4604      	mov	r4, r0
 8004d82:	4608      	mov	r0, r1
 8004d84:	4611      	mov	r1, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	602a      	str	r2, [r5, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f7fc f87b 	bl	8000e86 <_read>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_read_r+0x1e>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_read_r+0x1e>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	2000032c 	.word	0x2000032c

08004da0 <_write_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d07      	ldr	r5, [pc, #28]	@ (8004dc0 <_write_r+0x20>)
 8004da4:	4604      	mov	r4, r0
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	602a      	str	r2, [r5, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f7fc f886 	bl	8000ec0 <_write>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_write_r+0x1e>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_write_r+0x1e>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	2000032c 	.word	0x2000032c

08004dc4 <__errno>:
 8004dc4:	4b01      	ldr	r3, [pc, #4]	@ (8004dcc <__errno+0x8>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	2000001c 	.word	0x2000001c

08004dd0 <__libc_init_array>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8004e08 <__libc_init_array+0x38>)
 8004dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8004e0c <__libc_init_array+0x3c>)
 8004dd6:	1b64      	subs	r4, r4, r5
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	42a6      	cmp	r6, r4
 8004dde:	d109      	bne.n	8004df4 <__libc_init_array+0x24>
 8004de0:	4d0b      	ldr	r5, [pc, #44]	@ (8004e10 <__libc_init_array+0x40>)
 8004de2:	4c0c      	ldr	r4, [pc, #48]	@ (8004e14 <__libc_init_array+0x44>)
 8004de4:	f000 fe3a 	bl	8005a5c <_init>
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	2600      	movs	r6, #0
 8004dee:	42a6      	cmp	r6, r4
 8004df0:	d105      	bne.n	8004dfe <__libc_init_array+0x2e>
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df8:	4798      	blx	r3
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7ee      	b.n	8004ddc <__libc_init_array+0xc>
 8004dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e02:	4798      	blx	r3
 8004e04:	3601      	adds	r6, #1
 8004e06:	e7f2      	b.n	8004dee <__libc_init_array+0x1e>
 8004e08:	08005b9c 	.word	0x08005b9c
 8004e0c:	08005b9c 	.word	0x08005b9c
 8004e10:	08005b9c 	.word	0x08005b9c
 8004e14:	08005ba0 	.word	0x08005ba0

08004e18 <__retarget_lock_init_recursive>:
 8004e18:	4770      	bx	lr

08004e1a <__retarget_lock_acquire_recursive>:
 8004e1a:	4770      	bx	lr

08004e1c <__retarget_lock_release_recursive>:
 8004e1c:	4770      	bx	lr
	...

08004e20 <__assert_func>:
 8004e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e22:	4614      	mov	r4, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <__assert_func+0x2c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	68d8      	ldr	r0, [r3, #12]
 8004e2e:	b954      	cbnz	r4, 8004e46 <__assert_func+0x26>
 8004e30:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <__assert_func+0x30>)
 8004e32:	461c      	mov	r4, r3
 8004e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e38:	9100      	str	r1, [sp, #0]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	4905      	ldr	r1, [pc, #20]	@ (8004e54 <__assert_func+0x34>)
 8004e3e:	f000 f9b9 	bl	80051b4 <fiprintf>
 8004e42:	f000 f9d9 	bl	80051f8 <abort>
 8004e46:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <__assert_func+0x38>)
 8004e48:	e7f4      	b.n	8004e34 <__assert_func+0x14>
 8004e4a:	bf00      	nop
 8004e4c:	2000001c 	.word	0x2000001c
 8004e50:	08005b5e 	.word	0x08005b5e
 8004e54:	08005b30 	.word	0x08005b30
 8004e58:	08005b23 	.word	0x08005b23

08004e5c <_free_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d041      	beq.n	8004ee8 <_free_r+0x8c>
 8004e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e68:	1f0c      	subs	r4, r1, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfb8      	it	lt
 8004e6e:	18e4      	addlt	r4, r4, r3
 8004e70:	f000 f8e8 	bl	8005044 <__malloc_lock>
 8004e74:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <_free_r+0x90>)
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	b933      	cbnz	r3, 8004e88 <_free_r+0x2c>
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	6014      	str	r4, [r2, #0]
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e84:	f000 b8e4 	b.w	8005050 <__malloc_unlock>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d908      	bls.n	8004e9e <_free_r+0x42>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	1821      	adds	r1, r4, r0
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf01      	itttt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	1809      	addeq	r1, r1, r0
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	e7ed      	b.n	8004e7a <_free_r+0x1e>
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b10b      	cbz	r3, 8004ea8 <_free_r+0x4c>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d9fa      	bls.n	8004e9e <_free_r+0x42>
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	1850      	adds	r0, r2, r1
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d10b      	bne.n	8004ec8 <_free_r+0x6c>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	1850      	adds	r0, r2, r1
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	d1e0      	bne.n	8004e7e <_free_r+0x22>
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	4408      	add	r0, r1
 8004ec4:	6010      	str	r0, [r2, #0]
 8004ec6:	e7da      	b.n	8004e7e <_free_r+0x22>
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x74>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	e7d6      	b.n	8004e7e <_free_r+0x22>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	1821      	adds	r1, r4, r0
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf04      	itt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	bf04      	itt	eq
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6054      	str	r4, [r2, #4]
 8004ee6:	e7ca      	b.n	8004e7e <_free_r+0x22>
 8004ee8:	bd38      	pop	{r3, r4, r5, pc}
 8004eea:	bf00      	nop
 8004eec:	20000338 	.word	0x20000338

08004ef0 <malloc>:
 8004ef0:	4b02      	ldr	r3, [pc, #8]	@ (8004efc <malloc+0xc>)
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f000 b825 	b.w	8004f44 <_malloc_r>
 8004efa:	bf00      	nop
 8004efc:	2000001c 	.word	0x2000001c

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 f964 	bl	80051d8 <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 f95f 	bl	80051d8 <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d103      	bne.n	8004f26 <sbrk_aligned+0x26>
 8004f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f22:	4620      	mov	r0, r4
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d0f8      	beq.n	8004f22 <sbrk_aligned+0x22>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f950 	bl	80051d8 <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1f2      	bne.n	8004f22 <sbrk_aligned+0x22>
 8004f3c:	e7ef      	b.n	8004f1e <sbrk_aligned+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	20000334 	.word	0x20000334

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4606      	mov	r6, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d904      	bls.n	8004f6a <_malloc_r+0x26>
 8004f60:	230c      	movs	r3, #12
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005040 <_malloc_r+0xfc>
 8004f6e:	f000 f869 	bl	8005044 <__malloc_lock>
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	461c      	mov	r4, r3
 8004f78:	bb44      	cbnz	r4, 8004fcc <_malloc_r+0x88>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbf 	bl	8004f00 <sbrk_aligned>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	4604      	mov	r4, r0
 8004f86:	d158      	bne.n	800503a <_malloc_r+0xf6>
 8004f88:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d143      	bne.n	800501a <_malloc_r+0xd6>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d04b      	beq.n	800502e <_malloc_r+0xea>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	eb04 0903 	add.w	r9, r4, r3
 8004fa0:	f000 f91a 	bl	80051d8 <_sbrk_r>
 8004fa4:	4581      	cmp	r9, r0
 8004fa6:	d142      	bne.n	800502e <_malloc_r+0xea>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa6 	bl	8004f00 <sbrk_aligned>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d03a      	beq.n	800502e <_malloc_r+0xea>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	442b      	add	r3, r5
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	bb62      	cbnz	r2, 8005020 <_malloc_r+0xdc>
 8004fc6:	f8c8 7000 	str.w	r7, [r8]
 8004fca:	e00f      	b.n	8004fec <_malloc_r+0xa8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d917      	bls.n	8005006 <_malloc_r+0xc2>
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	6059      	strne	r1, [r3, #4]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	bf08      	it	eq
 8004fe4:	f8c8 1000 	streq.w	r1, [r8]
 8004fe8:	5162      	str	r2, [r4, r5]
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f82f 	bl	8005050 <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac2      	subs	r2, r0, r3
 8004ffe:	bf1c      	itt	ne
 8005000:	1a1b      	subne	r3, r3, r0
 8005002:	50a3      	strne	r3, [r4, r2]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x22>
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	42a3      	cmp	r3, r4
 800500a:	bf0c      	ite	eq
 800500c:	f8c8 2000 	streq.w	r2, [r8]
 8005010:	605a      	strne	r2, [r3, #4]
 8005012:	e7eb      	b.n	8004fec <_malloc_r+0xa8>
 8005014:	4623      	mov	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7ae      	b.n	8004f78 <_malloc_r+0x34>
 800501a:	463c      	mov	r4, r7
 800501c:	687f      	ldr	r7, [r7, #4]
 800501e:	e7b6      	b.n	8004f8e <_malloc_r+0x4a>
 8005020:	461a      	mov	r2, r3
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	d1fb      	bne.n	8005020 <_malloc_r+0xdc>
 8005028:	2300      	movs	r3, #0
 800502a:	6053      	str	r3, [r2, #4]
 800502c:	e7de      	b.n	8004fec <_malloc_r+0xa8>
 800502e:	230c      	movs	r3, #12
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f80c 	bl	8005050 <__malloc_unlock>
 8005038:	e794      	b.n	8004f64 <_malloc_r+0x20>
 800503a:	6005      	str	r5, [r0, #0]
 800503c:	e7d6      	b.n	8004fec <_malloc_r+0xa8>
 800503e:	bf00      	nop
 8005040:	20000338 	.word	0x20000338

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bee8 	b.w	8004e1a <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	20000330 	.word	0x20000330

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff bee3 	b.w	8004e1c <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	20000330 	.word	0x20000330

0800505c <__sflush_r>:
 800505c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005064:	0716      	lsls	r6, r2, #28
 8005066:	4605      	mov	r5, r0
 8005068:	460c      	mov	r4, r1
 800506a:	d454      	bmi.n	8005116 <__sflush_r+0xba>
 800506c:	684b      	ldr	r3, [r1, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dc02      	bgt.n	8005078 <__sflush_r+0x1c>
 8005072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	dd48      	ble.n	800510a <__sflush_r+0xae>
 8005078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800507a:	2e00      	cmp	r6, #0
 800507c:	d045      	beq.n	800510a <__sflush_r+0xae>
 800507e:	2300      	movs	r3, #0
 8005080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005084:	682f      	ldr	r7, [r5, #0]
 8005086:	6a21      	ldr	r1, [r4, #32]
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	d030      	beq.n	80050ee <__sflush_r+0x92>
 800508c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	0759      	lsls	r1, r3, #29
 8005092:	d505      	bpl.n	80050a0 <__sflush_r+0x44>
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800509a:	b10b      	cbz	r3, 80050a0 <__sflush_r+0x44>
 800509c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050a4:	6a21      	ldr	r1, [r4, #32]
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b0      	blx	r6
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	d106      	bne.n	80050be <__sflush_r+0x62>
 80050b0:	6829      	ldr	r1, [r5, #0]
 80050b2:	291d      	cmp	r1, #29
 80050b4:	d82b      	bhi.n	800510e <__sflush_r+0xb2>
 80050b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <__sflush_r+0x104>)
 80050b8:	410a      	asrs	r2, r1
 80050ba:	07d6      	lsls	r6, r2, #31
 80050bc:	d427      	bmi.n	800510e <__sflush_r+0xb2>
 80050be:	2200      	movs	r2, #0
 80050c0:	6062      	str	r2, [r4, #4]
 80050c2:	04d9      	lsls	r1, r3, #19
 80050c4:	6922      	ldr	r2, [r4, #16]
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	d504      	bpl.n	80050d4 <__sflush_r+0x78>
 80050ca:	1c42      	adds	r2, r0, #1
 80050cc:	d101      	bne.n	80050d2 <__sflush_r+0x76>
 80050ce:	682b      	ldr	r3, [r5, #0]
 80050d0:	b903      	cbnz	r3, 80050d4 <__sflush_r+0x78>
 80050d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80050d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050d6:	602f      	str	r7, [r5, #0]
 80050d8:	b1b9      	cbz	r1, 800510a <__sflush_r+0xae>
 80050da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050de:	4299      	cmp	r1, r3
 80050e0:	d002      	beq.n	80050e8 <__sflush_r+0x8c>
 80050e2:	4628      	mov	r0, r5
 80050e4:	f7ff feba 	bl	8004e5c <_free_r>
 80050e8:	2300      	movs	r3, #0
 80050ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80050ec:	e00d      	b.n	800510a <__sflush_r+0xae>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b0      	blx	r6
 80050f4:	4602      	mov	r2, r0
 80050f6:	1c50      	adds	r0, r2, #1
 80050f8:	d1c9      	bne.n	800508e <__sflush_r+0x32>
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0c6      	beq.n	800508e <__sflush_r+0x32>
 8005100:	2b1d      	cmp	r3, #29
 8005102:	d001      	beq.n	8005108 <__sflush_r+0xac>
 8005104:	2b16      	cmp	r3, #22
 8005106:	d11e      	bne.n	8005146 <__sflush_r+0xea>
 8005108:	602f      	str	r7, [r5, #0]
 800510a:	2000      	movs	r0, #0
 800510c:	e022      	b.n	8005154 <__sflush_r+0xf8>
 800510e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005112:	b21b      	sxth	r3, r3
 8005114:	e01b      	b.n	800514e <__sflush_r+0xf2>
 8005116:	690f      	ldr	r7, [r1, #16]
 8005118:	2f00      	cmp	r7, #0
 800511a:	d0f6      	beq.n	800510a <__sflush_r+0xae>
 800511c:	0793      	lsls	r3, r2, #30
 800511e:	680e      	ldr	r6, [r1, #0]
 8005120:	bf08      	it	eq
 8005122:	694b      	ldreq	r3, [r1, #20]
 8005124:	600f      	str	r7, [r1, #0]
 8005126:	bf18      	it	ne
 8005128:	2300      	movne	r3, #0
 800512a:	eba6 0807 	sub.w	r8, r6, r7
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	f1b8 0f00 	cmp.w	r8, #0
 8005134:	dde9      	ble.n	800510a <__sflush_r+0xae>
 8005136:	6a21      	ldr	r1, [r4, #32]
 8005138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800513a:	4643      	mov	r3, r8
 800513c:	463a      	mov	r2, r7
 800513e:	4628      	mov	r0, r5
 8005140:	47b0      	blx	r6
 8005142:	2800      	cmp	r0, #0
 8005144:	dc08      	bgt.n	8005158 <__sflush_r+0xfc>
 8005146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800514a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005158:	4407      	add	r7, r0
 800515a:	eba8 0800 	sub.w	r8, r8, r0
 800515e:	e7e7      	b.n	8005130 <__sflush_r+0xd4>
 8005160:	dfbffffe 	.word	0xdfbffffe

08005164 <_fflush_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	690b      	ldr	r3, [r1, #16]
 8005168:	4605      	mov	r5, r0
 800516a:	460c      	mov	r4, r1
 800516c:	b913      	cbnz	r3, 8005174 <_fflush_r+0x10>
 800516e:	2500      	movs	r5, #0
 8005170:	4628      	mov	r0, r5
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	b118      	cbz	r0, 800517e <_fflush_r+0x1a>
 8005176:	6a03      	ldr	r3, [r0, #32]
 8005178:	b90b      	cbnz	r3, 800517e <_fflush_r+0x1a>
 800517a:	f7ff fd5b 	bl	8004c34 <__sinit>
 800517e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f3      	beq.n	800516e <_fflush_r+0xa>
 8005186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005188:	07d0      	lsls	r0, r2, #31
 800518a:	d404      	bmi.n	8005196 <_fflush_r+0x32>
 800518c:	0599      	lsls	r1, r3, #22
 800518e:	d402      	bmi.n	8005196 <_fflush_r+0x32>
 8005190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005192:	f7ff fe42 	bl	8004e1a <__retarget_lock_acquire_recursive>
 8005196:	4628      	mov	r0, r5
 8005198:	4621      	mov	r1, r4
 800519a:	f7ff ff5f 	bl	800505c <__sflush_r>
 800519e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051a0:	07da      	lsls	r2, r3, #31
 80051a2:	4605      	mov	r5, r0
 80051a4:	d4e4      	bmi.n	8005170 <_fflush_r+0xc>
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	059b      	lsls	r3, r3, #22
 80051aa:	d4e1      	bmi.n	8005170 <_fflush_r+0xc>
 80051ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051ae:	f7ff fe35 	bl	8004e1c <__retarget_lock_release_recursive>
 80051b2:	e7dd      	b.n	8005170 <_fflush_r+0xc>

080051b4 <fiprintf>:
 80051b4:	b40e      	push	{r1, r2, r3}
 80051b6:	b503      	push	{r0, r1, lr}
 80051b8:	4601      	mov	r1, r0
 80051ba:	ab03      	add	r3, sp, #12
 80051bc:	4805      	ldr	r0, [pc, #20]	@ (80051d4 <fiprintf+0x20>)
 80051be:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c2:	6800      	ldr	r0, [r0, #0]
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	f000 f847 	bl	8005258 <_vfiprintf_r>
 80051ca:	b002      	add	sp, #8
 80051cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051d0:	b003      	add	sp, #12
 80051d2:	4770      	bx	lr
 80051d4:	2000001c 	.word	0x2000001c

080051d8 <_sbrk_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	4d06      	ldr	r5, [pc, #24]	@ (80051f4 <_sbrk_r+0x1c>)
 80051dc:	2300      	movs	r3, #0
 80051de:	4604      	mov	r4, r0
 80051e0:	4608      	mov	r0, r1
 80051e2:	602b      	str	r3, [r5, #0]
 80051e4:	f7fb febc 	bl	8000f60 <_sbrk>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_sbrk_r+0x1a>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_sbrk_r+0x1a>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	2000032c 	.word	0x2000032c

080051f8 <abort>:
 80051f8:	b508      	push	{r3, lr}
 80051fa:	2006      	movs	r0, #6
 80051fc:	f000 fb8e 	bl	800591c <raise>
 8005200:	2001      	movs	r0, #1
 8005202:	f7fb fe35 	bl	8000e70 <_exit>

08005206 <__sfputc_r>:
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	3b01      	subs	r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	b410      	push	{r4}
 800520e:	6093      	str	r3, [r2, #8]
 8005210:	da08      	bge.n	8005224 <__sfputc_r+0x1e>
 8005212:	6994      	ldr	r4, [r2, #24]
 8005214:	42a3      	cmp	r3, r4
 8005216:	db01      	blt.n	800521c <__sfputc_r+0x16>
 8005218:	290a      	cmp	r1, #10
 800521a:	d103      	bne.n	8005224 <__sfputc_r+0x1e>
 800521c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005220:	f000 bac0 	b.w	80057a4 <__swbuf_r>
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	1c58      	adds	r0, r3, #1
 8005228:	6010      	str	r0, [r2, #0]
 800522a:	7019      	strb	r1, [r3, #0]
 800522c:	4608      	mov	r0, r1
 800522e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005232:	4770      	bx	lr

08005234 <__sfputs_r>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	4606      	mov	r6, r0
 8005238:	460f      	mov	r7, r1
 800523a:	4614      	mov	r4, r2
 800523c:	18d5      	adds	r5, r2, r3
 800523e:	42ac      	cmp	r4, r5
 8005240:	d101      	bne.n	8005246 <__sfputs_r+0x12>
 8005242:	2000      	movs	r0, #0
 8005244:	e007      	b.n	8005256 <__sfputs_r+0x22>
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	463a      	mov	r2, r7
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff ffda 	bl	8005206 <__sfputc_r>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	d1f3      	bne.n	800523e <__sfputs_r+0xa>
 8005256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005258 <_vfiprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	460d      	mov	r5, r1
 800525e:	b09d      	sub	sp, #116	@ 0x74
 8005260:	4614      	mov	r4, r2
 8005262:	4698      	mov	r8, r3
 8005264:	4606      	mov	r6, r0
 8005266:	b118      	cbz	r0, 8005270 <_vfiprintf_r+0x18>
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	b90b      	cbnz	r3, 8005270 <_vfiprintf_r+0x18>
 800526c:	f7ff fce2 	bl	8004c34 <__sinit>
 8005270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	d405      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	059a      	lsls	r2, r3, #22
 800527a:	d402      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 800527c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800527e:	f7ff fdcc 	bl	8004e1a <__retarget_lock_acquire_recursive>
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	d501      	bpl.n	800528c <_vfiprintf_r+0x34>
 8005288:	692b      	ldr	r3, [r5, #16]
 800528a:	b99b      	cbnz	r3, 80052b4 <_vfiprintf_r+0x5c>
 800528c:	4629      	mov	r1, r5
 800528e:	4630      	mov	r0, r6
 8005290:	f000 fac6 	bl	8005820 <__swsetup_r>
 8005294:	b170      	cbz	r0, 80052b4 <_vfiprintf_r+0x5c>
 8005296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005298:	07dc      	lsls	r4, r3, #31
 800529a:	d504      	bpl.n	80052a6 <_vfiprintf_r+0x4e>
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	b01d      	add	sp, #116	@ 0x74
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	0598      	lsls	r0, r3, #22
 80052aa:	d4f7      	bmi.n	800529c <_vfiprintf_r+0x44>
 80052ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ae:	f7ff fdb5 	bl	8004e1c <__retarget_lock_release_recursive>
 80052b2:	e7f3      	b.n	800529c <_vfiprintf_r+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052b8:	2320      	movs	r3, #32
 80052ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052be:	f8cd 800c 	str.w	r8, [sp, #12]
 80052c2:	2330      	movs	r3, #48	@ 0x30
 80052c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005474 <_vfiprintf_r+0x21c>
 80052c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052cc:	f04f 0901 	mov.w	r9, #1
 80052d0:	4623      	mov	r3, r4
 80052d2:	469a      	mov	sl, r3
 80052d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d8:	b10a      	cbz	r2, 80052de <_vfiprintf_r+0x86>
 80052da:	2a25      	cmp	r2, #37	@ 0x25
 80052dc:	d1f9      	bne.n	80052d2 <_vfiprintf_r+0x7a>
 80052de:	ebba 0b04 	subs.w	fp, sl, r4
 80052e2:	d00b      	beq.n	80052fc <_vfiprintf_r+0xa4>
 80052e4:	465b      	mov	r3, fp
 80052e6:	4622      	mov	r2, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff ffa2 	bl	8005234 <__sfputs_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	f000 80a7 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 80052f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052f8:	445a      	add	r2, fp
 80052fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80052fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 809f 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 8005306:	2300      	movs	r3, #0
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005310:	f10a 0a01 	add.w	sl, sl, #1
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	9307      	str	r3, [sp, #28]
 8005318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800531c:	931a      	str	r3, [sp, #104]	@ 0x68
 800531e:	4654      	mov	r4, sl
 8005320:	2205      	movs	r2, #5
 8005322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005326:	4853      	ldr	r0, [pc, #332]	@ (8005474 <_vfiprintf_r+0x21c>)
 8005328:	f7fa ff7a 	bl	8000220 <memchr>
 800532c:	9a04      	ldr	r2, [sp, #16]
 800532e:	b9d8      	cbnz	r0, 8005368 <_vfiprintf_r+0x110>
 8005330:	06d1      	lsls	r1, r2, #27
 8005332:	bf44      	itt	mi
 8005334:	2320      	movmi	r3, #32
 8005336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800533a:	0713      	lsls	r3, r2, #28
 800533c:	bf44      	itt	mi
 800533e:	232b      	movmi	r3, #43	@ 0x2b
 8005340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005344:	f89a 3000 	ldrb.w	r3, [sl]
 8005348:	2b2a      	cmp	r3, #42	@ 0x2a
 800534a:	d015      	beq.n	8005378 <_vfiprintf_r+0x120>
 800534c:	9a07      	ldr	r2, [sp, #28]
 800534e:	4654      	mov	r4, sl
 8005350:	2000      	movs	r0, #0
 8005352:	f04f 0c0a 	mov.w	ip, #10
 8005356:	4621      	mov	r1, r4
 8005358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800535c:	3b30      	subs	r3, #48	@ 0x30
 800535e:	2b09      	cmp	r3, #9
 8005360:	d94b      	bls.n	80053fa <_vfiprintf_r+0x1a2>
 8005362:	b1b0      	cbz	r0, 8005392 <_vfiprintf_r+0x13a>
 8005364:	9207      	str	r2, [sp, #28]
 8005366:	e014      	b.n	8005392 <_vfiprintf_r+0x13a>
 8005368:	eba0 0308 	sub.w	r3, r0, r8
 800536c:	fa09 f303 	lsl.w	r3, r9, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	46a2      	mov	sl, r4
 8005376:	e7d2      	b.n	800531e <_vfiprintf_r+0xc6>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1d19      	adds	r1, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	9103      	str	r1, [sp, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	bfbb      	ittet	lt
 8005384:	425b      	neglt	r3, r3
 8005386:	f042 0202 	orrlt.w	r2, r2, #2
 800538a:	9307      	strge	r3, [sp, #28]
 800538c:	9307      	strlt	r3, [sp, #28]
 800538e:	bfb8      	it	lt
 8005390:	9204      	strlt	r2, [sp, #16]
 8005392:	7823      	ldrb	r3, [r4, #0]
 8005394:	2b2e      	cmp	r3, #46	@ 0x2e
 8005396:	d10a      	bne.n	80053ae <_vfiprintf_r+0x156>
 8005398:	7863      	ldrb	r3, [r4, #1]
 800539a:	2b2a      	cmp	r3, #42	@ 0x2a
 800539c:	d132      	bne.n	8005404 <_vfiprintf_r+0x1ac>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	1d1a      	adds	r2, r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	9203      	str	r2, [sp, #12]
 80053a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053aa:	3402      	adds	r4, #2
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005484 <_vfiprintf_r+0x22c>
 80053b2:	7821      	ldrb	r1, [r4, #0]
 80053b4:	2203      	movs	r2, #3
 80053b6:	4650      	mov	r0, sl
 80053b8:	f7fa ff32 	bl	8000220 <memchr>
 80053bc:	b138      	cbz	r0, 80053ce <_vfiprintf_r+0x176>
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	eba0 000a 	sub.w	r0, r0, sl
 80053c4:	2240      	movs	r2, #64	@ 0x40
 80053c6:	4082      	lsls	r2, r0
 80053c8:	4313      	orrs	r3, r2
 80053ca:	3401      	adds	r4, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d2:	4829      	ldr	r0, [pc, #164]	@ (8005478 <_vfiprintf_r+0x220>)
 80053d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053d8:	2206      	movs	r2, #6
 80053da:	f7fa ff21 	bl	8000220 <memchr>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d03f      	beq.n	8005462 <_vfiprintf_r+0x20a>
 80053e2:	4b26      	ldr	r3, [pc, #152]	@ (800547c <_vfiprintf_r+0x224>)
 80053e4:	bb1b      	cbnz	r3, 800542e <_vfiprintf_r+0x1d6>
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	3308      	adds	r3, #8
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f4:	443b      	add	r3, r7
 80053f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f8:	e76a      	b.n	80052d0 <_vfiprintf_r+0x78>
 80053fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053fe:	460c      	mov	r4, r1
 8005400:	2001      	movs	r0, #1
 8005402:	e7a8      	b.n	8005356 <_vfiprintf_r+0xfe>
 8005404:	2300      	movs	r3, #0
 8005406:	3401      	adds	r4, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4619      	mov	r1, r3
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4620      	mov	r0, r4
 8005412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005416:	3a30      	subs	r2, #48	@ 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d903      	bls.n	8005424 <_vfiprintf_r+0x1cc>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0c6      	beq.n	80053ae <_vfiprintf_r+0x156>
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	e7c4      	b.n	80053ae <_vfiprintf_r+0x156>
 8005424:	fb0c 2101 	mla	r1, ip, r1, r2
 8005428:	4604      	mov	r4, r0
 800542a:	2301      	movs	r3, #1
 800542c:	e7f0      	b.n	8005410 <_vfiprintf_r+0x1b8>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <_vfiprintf_r+0x228>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4630      	mov	r0, r6
 800543a:	f3af 8000 	nop.w
 800543e:	4607      	mov	r7, r0
 8005440:	1c78      	adds	r0, r7, #1
 8005442:	d1d6      	bne.n	80053f2 <_vfiprintf_r+0x19a>
 8005444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005446:	07d9      	lsls	r1, r3, #31
 8005448:	d405      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	059a      	lsls	r2, r3, #22
 800544e:	d402      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 8005450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005452:	f7ff fce3 	bl	8004e1c <__retarget_lock_release_recursive>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	065b      	lsls	r3, r3, #25
 800545a:	f53f af1f 	bmi.w	800529c <_vfiprintf_r+0x44>
 800545e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005460:	e71e      	b.n	80052a0 <_vfiprintf_r+0x48>
 8005462:	ab03      	add	r3, sp, #12
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	462a      	mov	r2, r5
 8005468:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <_vfiprintf_r+0x228>)
 800546a:	a904      	add	r1, sp, #16
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f879 	bl	8005564 <_printf_i>
 8005472:	e7e4      	b.n	800543e <_vfiprintf_r+0x1e6>
 8005474:	08005b5f 	.word	0x08005b5f
 8005478:	08005b69 	.word	0x08005b69
 800547c:	00000000 	.word	0x00000000
 8005480:	08005235 	.word	0x08005235
 8005484:	08005b65 	.word	0x08005b65

08005488 <_printf_common>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	4616      	mov	r6, r2
 800548e:	4698      	mov	r8, r3
 8005490:	688a      	ldr	r2, [r1, #8]
 8005492:	690b      	ldr	r3, [r1, #16]
 8005494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005498:	4293      	cmp	r3, r2
 800549a:	bfb8      	it	lt
 800549c:	4613      	movlt	r3, r2
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a4:	4607      	mov	r7, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b10a      	cbz	r2, 80054ae <_printf_common+0x26>
 80054aa:	3301      	adds	r3, #1
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	0699      	lsls	r1, r3, #26
 80054b2:	bf42      	ittt	mi
 80054b4:	6833      	ldrmi	r3, [r6, #0]
 80054b6:	3302      	addmi	r3, #2
 80054b8:	6033      	strmi	r3, [r6, #0]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	f015 0506 	ands.w	r5, r5, #6
 80054c0:	d106      	bne.n	80054d0 <_printf_common+0x48>
 80054c2:	f104 0a19 	add.w	sl, r4, #25
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	6832      	ldr	r2, [r6, #0]
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	42ab      	cmp	r3, r5
 80054ce:	dc26      	bgt.n	800551e <_printf_common+0x96>
 80054d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	3b00      	subs	r3, #0
 80054d8:	bf18      	it	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	0692      	lsls	r2, r2, #26
 80054de:	d42b      	bmi.n	8005538 <_printf_common+0xb0>
 80054e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e4:	4641      	mov	r1, r8
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c8      	blx	r9
 80054ea:	3001      	adds	r0, #1
 80054ec:	d01e      	beq.n	800552c <_printf_common+0xa4>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	bf02      	ittt	eq
 80054fa:	68e5      	ldreq	r5, [r4, #12]
 80054fc:	6833      	ldreq	r3, [r6, #0]
 80054fe:	1aed      	subeq	r5, r5, r3
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	bf0c      	ite	eq
 8005504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005508:	2500      	movne	r5, #0
 800550a:	4293      	cmp	r3, r2
 800550c:	bfc4      	itt	gt
 800550e:	1a9b      	subgt	r3, r3, r2
 8005510:	18ed      	addgt	r5, r5, r3
 8005512:	2600      	movs	r6, #0
 8005514:	341a      	adds	r4, #26
 8005516:	42b5      	cmp	r5, r6
 8005518:	d11a      	bne.n	8005550 <_printf_common+0xc8>
 800551a:	2000      	movs	r0, #0
 800551c:	e008      	b.n	8005530 <_printf_common+0xa8>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4641      	mov	r1, r8
 8005524:	4638      	mov	r0, r7
 8005526:	47c8      	blx	r9
 8005528:	3001      	adds	r0, #1
 800552a:	d103      	bne.n	8005534 <_printf_common+0xac>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005534:	3501      	adds	r5, #1
 8005536:	e7c6      	b.n	80054c6 <_printf_common+0x3e>
 8005538:	18e1      	adds	r1, r4, r3
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	2030      	movs	r0, #48	@ 0x30
 800553e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005542:	4422      	add	r2, r4
 8005544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800554c:	3302      	adds	r3, #2
 800554e:	e7c7      	b.n	80054e0 <_printf_common+0x58>
 8005550:	2301      	movs	r3, #1
 8005552:	4622      	mov	r2, r4
 8005554:	4641      	mov	r1, r8
 8005556:	4638      	mov	r0, r7
 8005558:	47c8      	blx	r9
 800555a:	3001      	adds	r0, #1
 800555c:	d0e6      	beq.n	800552c <_printf_common+0xa4>
 800555e:	3601      	adds	r6, #1
 8005560:	e7d9      	b.n	8005516 <_printf_common+0x8e>
	...

08005564 <_printf_i>:
 8005564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	7e0f      	ldrb	r7, [r1, #24]
 800556a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800556c:	2f78      	cmp	r7, #120	@ 0x78
 800556e:	4691      	mov	r9, r2
 8005570:	4680      	mov	r8, r0
 8005572:	460c      	mov	r4, r1
 8005574:	469a      	mov	sl, r3
 8005576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800557a:	d807      	bhi.n	800558c <_printf_i+0x28>
 800557c:	2f62      	cmp	r7, #98	@ 0x62
 800557e:	d80a      	bhi.n	8005596 <_printf_i+0x32>
 8005580:	2f00      	cmp	r7, #0
 8005582:	f000 80d2 	beq.w	800572a <_printf_i+0x1c6>
 8005586:	2f58      	cmp	r7, #88	@ 0x58
 8005588:	f000 80b9 	beq.w	80056fe <_printf_i+0x19a>
 800558c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005594:	e03a      	b.n	800560c <_printf_i+0xa8>
 8005596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800559a:	2b15      	cmp	r3, #21
 800559c:	d8f6      	bhi.n	800558c <_printf_i+0x28>
 800559e:	a101      	add	r1, pc, #4	@ (adr r1, 80055a4 <_printf_i+0x40>)
 80055a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	08005611 	.word	0x08005611
 80055ac:	0800558d 	.word	0x0800558d
 80055b0:	0800558d 	.word	0x0800558d
 80055b4:	0800558d 	.word	0x0800558d
 80055b8:	0800558d 	.word	0x0800558d
 80055bc:	08005611 	.word	0x08005611
 80055c0:	0800558d 	.word	0x0800558d
 80055c4:	0800558d 	.word	0x0800558d
 80055c8:	0800558d 	.word	0x0800558d
 80055cc:	0800558d 	.word	0x0800558d
 80055d0:	08005711 	.word	0x08005711
 80055d4:	0800563b 	.word	0x0800563b
 80055d8:	080056cb 	.word	0x080056cb
 80055dc:	0800558d 	.word	0x0800558d
 80055e0:	0800558d 	.word	0x0800558d
 80055e4:	08005733 	.word	0x08005733
 80055e8:	0800558d 	.word	0x0800558d
 80055ec:	0800563b 	.word	0x0800563b
 80055f0:	0800558d 	.word	0x0800558d
 80055f4:	0800558d 	.word	0x0800558d
 80055f8:	080056d3 	.word	0x080056d3
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800560c:	2301      	movs	r3, #1
 800560e:	e09d      	b.n	800574c <_printf_i+0x1e8>
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	1d19      	adds	r1, r3, #4
 8005616:	6031      	str	r1, [r6, #0]
 8005618:	0606      	lsls	r6, r0, #24
 800561a:	d501      	bpl.n	8005620 <_printf_i+0xbc>
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	e003      	b.n	8005628 <_printf_i+0xc4>
 8005620:	0645      	lsls	r5, r0, #25
 8005622:	d5fb      	bpl.n	800561c <_printf_i+0xb8>
 8005624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005628:	2d00      	cmp	r5, #0
 800562a:	da03      	bge.n	8005634 <_printf_i+0xd0>
 800562c:	232d      	movs	r3, #45	@ 0x2d
 800562e:	426d      	negs	r5, r5
 8005630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005634:	4859      	ldr	r0, [pc, #356]	@ (800579c <_printf_i+0x238>)
 8005636:	230a      	movs	r3, #10
 8005638:	e011      	b.n	800565e <_printf_i+0xfa>
 800563a:	6821      	ldr	r1, [r4, #0]
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	0608      	lsls	r0, r1, #24
 8005640:	f853 5b04 	ldr.w	r5, [r3], #4
 8005644:	d402      	bmi.n	800564c <_printf_i+0xe8>
 8005646:	0649      	lsls	r1, r1, #25
 8005648:	bf48      	it	mi
 800564a:	b2ad      	uxthmi	r5, r5
 800564c:	2f6f      	cmp	r7, #111	@ 0x6f
 800564e:	4853      	ldr	r0, [pc, #332]	@ (800579c <_printf_i+0x238>)
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	bf14      	ite	ne
 8005654:	230a      	movne	r3, #10
 8005656:	2308      	moveq	r3, #8
 8005658:	2100      	movs	r1, #0
 800565a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800565e:	6866      	ldr	r6, [r4, #4]
 8005660:	60a6      	str	r6, [r4, #8]
 8005662:	2e00      	cmp	r6, #0
 8005664:	bfa2      	ittt	ge
 8005666:	6821      	ldrge	r1, [r4, #0]
 8005668:	f021 0104 	bicge.w	r1, r1, #4
 800566c:	6021      	strge	r1, [r4, #0]
 800566e:	b90d      	cbnz	r5, 8005674 <_printf_i+0x110>
 8005670:	2e00      	cmp	r6, #0
 8005672:	d04b      	beq.n	800570c <_printf_i+0x1a8>
 8005674:	4616      	mov	r6, r2
 8005676:	fbb5 f1f3 	udiv	r1, r5, r3
 800567a:	fb03 5711 	mls	r7, r3, r1, r5
 800567e:	5dc7      	ldrb	r7, [r0, r7]
 8005680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005684:	462f      	mov	r7, r5
 8005686:	42bb      	cmp	r3, r7
 8005688:	460d      	mov	r5, r1
 800568a:	d9f4      	bls.n	8005676 <_printf_i+0x112>
 800568c:	2b08      	cmp	r3, #8
 800568e:	d10b      	bne.n	80056a8 <_printf_i+0x144>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07df      	lsls	r7, r3, #31
 8005694:	d508      	bpl.n	80056a8 <_printf_i+0x144>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	6861      	ldr	r1, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	bfde      	ittt	le
 800569e:	2330      	movle	r3, #48	@ 0x30
 80056a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056a8:	1b92      	subs	r2, r2, r6
 80056aa:	6122      	str	r2, [r4, #16]
 80056ac:	f8cd a000 	str.w	sl, [sp]
 80056b0:	464b      	mov	r3, r9
 80056b2:	aa03      	add	r2, sp, #12
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fee6 	bl	8005488 <_printf_common>
 80056bc:	3001      	adds	r0, #1
 80056be:	d14a      	bne.n	8005756 <_printf_i+0x1f2>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	b004      	add	sp, #16
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	f043 0320 	orr.w	r3, r3, #32
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	4833      	ldr	r0, [pc, #204]	@ (80057a0 <_printf_i+0x23c>)
 80056d4:	2778      	movs	r7, #120	@ 0x78
 80056d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	6831      	ldr	r1, [r6, #0]
 80056de:	061f      	lsls	r7, r3, #24
 80056e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e4:	d402      	bmi.n	80056ec <_printf_i+0x188>
 80056e6:	065f      	lsls	r7, r3, #25
 80056e8:	bf48      	it	mi
 80056ea:	b2ad      	uxthmi	r5, r5
 80056ec:	6031      	str	r1, [r6, #0]
 80056ee:	07d9      	lsls	r1, r3, #31
 80056f0:	bf44      	itt	mi
 80056f2:	f043 0320 	orrmi.w	r3, r3, #32
 80056f6:	6023      	strmi	r3, [r4, #0]
 80056f8:	b11d      	cbz	r5, 8005702 <_printf_i+0x19e>
 80056fa:	2310      	movs	r3, #16
 80056fc:	e7ac      	b.n	8005658 <_printf_i+0xf4>
 80056fe:	4827      	ldr	r0, [pc, #156]	@ (800579c <_printf_i+0x238>)
 8005700:	e7e9      	b.n	80056d6 <_printf_i+0x172>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f023 0320 	bic.w	r3, r3, #32
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	e7f6      	b.n	80056fa <_printf_i+0x196>
 800570c:	4616      	mov	r6, r2
 800570e:	e7bd      	b.n	800568c <_printf_i+0x128>
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	6825      	ldr	r5, [r4, #0]
 8005714:	6961      	ldr	r1, [r4, #20]
 8005716:	1d18      	adds	r0, r3, #4
 8005718:	6030      	str	r0, [r6, #0]
 800571a:	062e      	lsls	r6, r5, #24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	d501      	bpl.n	8005724 <_printf_i+0x1c0>
 8005720:	6019      	str	r1, [r3, #0]
 8005722:	e002      	b.n	800572a <_printf_i+0x1c6>
 8005724:	0668      	lsls	r0, r5, #25
 8005726:	d5fb      	bpl.n	8005720 <_printf_i+0x1bc>
 8005728:	8019      	strh	r1, [r3, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	4616      	mov	r6, r2
 8005730:	e7bc      	b.n	80056ac <_printf_i+0x148>
 8005732:	6833      	ldr	r3, [r6, #0]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	6032      	str	r2, [r6, #0]
 8005738:	681e      	ldr	r6, [r3, #0]
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	2100      	movs	r1, #0
 800573e:	4630      	mov	r0, r6
 8005740:	f7fa fd6e 	bl	8000220 <memchr>
 8005744:	b108      	cbz	r0, 800574a <_printf_i+0x1e6>
 8005746:	1b80      	subs	r0, r0, r6
 8005748:	6060      	str	r0, [r4, #4]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005754:	e7aa      	b.n	80056ac <_printf_i+0x148>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	4632      	mov	r2, r6
 800575a:	4649      	mov	r1, r9
 800575c:	4640      	mov	r0, r8
 800575e:	47d0      	blx	sl
 8005760:	3001      	adds	r0, #1
 8005762:	d0ad      	beq.n	80056c0 <_printf_i+0x15c>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	079b      	lsls	r3, r3, #30
 8005768:	d413      	bmi.n	8005792 <_printf_i+0x22e>
 800576a:	68e0      	ldr	r0, [r4, #12]
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	4298      	cmp	r0, r3
 8005770:	bfb8      	it	lt
 8005772:	4618      	movlt	r0, r3
 8005774:	e7a6      	b.n	80056c4 <_printf_i+0x160>
 8005776:	2301      	movs	r3, #1
 8005778:	4632      	mov	r2, r6
 800577a:	4649      	mov	r1, r9
 800577c:	4640      	mov	r0, r8
 800577e:	47d0      	blx	sl
 8005780:	3001      	adds	r0, #1
 8005782:	d09d      	beq.n	80056c0 <_printf_i+0x15c>
 8005784:	3501      	adds	r5, #1
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	9903      	ldr	r1, [sp, #12]
 800578a:	1a5b      	subs	r3, r3, r1
 800578c:	42ab      	cmp	r3, r5
 800578e:	dcf2      	bgt.n	8005776 <_printf_i+0x212>
 8005790:	e7eb      	b.n	800576a <_printf_i+0x206>
 8005792:	2500      	movs	r5, #0
 8005794:	f104 0619 	add.w	r6, r4, #25
 8005798:	e7f5      	b.n	8005786 <_printf_i+0x222>
 800579a:	bf00      	nop
 800579c:	08005b70 	.word	0x08005b70
 80057a0:	08005b81 	.word	0x08005b81

080057a4 <__swbuf_r>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	460e      	mov	r6, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	4605      	mov	r5, r0
 80057ac:	b118      	cbz	r0, 80057b6 <__swbuf_r+0x12>
 80057ae:	6a03      	ldr	r3, [r0, #32]
 80057b0:	b90b      	cbnz	r3, 80057b6 <__swbuf_r+0x12>
 80057b2:	f7ff fa3f 	bl	8004c34 <__sinit>
 80057b6:	69a3      	ldr	r3, [r4, #24]
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	071a      	lsls	r2, r3, #28
 80057be:	d501      	bpl.n	80057c4 <__swbuf_r+0x20>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b943      	cbnz	r3, 80057d6 <__swbuf_r+0x32>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 f82a 	bl	8005820 <__swsetup_r>
 80057cc:	b118      	cbz	r0, 80057d6 <__swbuf_r+0x32>
 80057ce:	f04f 37ff 	mov.w	r7, #4294967295
 80057d2:	4638      	mov	r0, r7
 80057d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	1a98      	subs	r0, r3, r2
 80057dc:	6963      	ldr	r3, [r4, #20]
 80057de:	b2f6      	uxtb	r6, r6
 80057e0:	4283      	cmp	r3, r0
 80057e2:	4637      	mov	r7, r6
 80057e4:	dc05      	bgt.n	80057f2 <__swbuf_r+0x4e>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7ff fcbb 	bl	8005164 <_fflush_r>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d1ed      	bne.n	80057ce <__swbuf_r+0x2a>
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	6022      	str	r2, [r4, #0]
 80057fe:	701e      	strb	r6, [r3, #0]
 8005800:	6962      	ldr	r2, [r4, #20]
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	429a      	cmp	r2, r3
 8005806:	d004      	beq.n	8005812 <__swbuf_r+0x6e>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d5e1      	bpl.n	80057d2 <__swbuf_r+0x2e>
 800580e:	2e0a      	cmp	r6, #10
 8005810:	d1df      	bne.n	80057d2 <__swbuf_r+0x2e>
 8005812:	4621      	mov	r1, r4
 8005814:	4628      	mov	r0, r5
 8005816:	f7ff fca5 	bl	8005164 <_fflush_r>
 800581a:	2800      	cmp	r0, #0
 800581c:	d0d9      	beq.n	80057d2 <__swbuf_r+0x2e>
 800581e:	e7d6      	b.n	80057ce <__swbuf_r+0x2a>

08005820 <__swsetup_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <__swsetup_r+0xa8>)
 8005824:	4605      	mov	r5, r0
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	460c      	mov	r4, r1
 800582a:	b118      	cbz	r0, 8005834 <__swsetup_r+0x14>
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b90b      	cbnz	r3, 8005834 <__swsetup_r+0x14>
 8005830:	f7ff fa00 	bl	8004c34 <__sinit>
 8005834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005838:	0719      	lsls	r1, r3, #28
 800583a:	d422      	bmi.n	8005882 <__swsetup_r+0x62>
 800583c:	06da      	lsls	r2, r3, #27
 800583e:	d407      	bmi.n	8005850 <__swsetup_r+0x30>
 8005840:	2209      	movs	r2, #9
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	f04f 30ff 	mov.w	r0, #4294967295
 800584e:	e033      	b.n	80058b8 <__swsetup_r+0x98>
 8005850:	0758      	lsls	r0, r3, #29
 8005852:	d512      	bpl.n	800587a <__swsetup_r+0x5a>
 8005854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005856:	b141      	cbz	r1, 800586a <__swsetup_r+0x4a>
 8005858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800585c:	4299      	cmp	r1, r3
 800585e:	d002      	beq.n	8005866 <__swsetup_r+0x46>
 8005860:	4628      	mov	r0, r5
 8005862:	f7ff fafb 	bl	8004e5c <_free_r>
 8005866:	2300      	movs	r3, #0
 8005868:	6363      	str	r3, [r4, #52]	@ 0x34
 800586a:	89a3      	ldrh	r3, [r4, #12]
 800586c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	2300      	movs	r3, #0
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f043 0308 	orr.w	r3, r3, #8
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	b94b      	cbnz	r3, 800589a <__swsetup_r+0x7a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d003      	beq.n	800589a <__swsetup_r+0x7a>
 8005892:	4621      	mov	r1, r4
 8005894:	4628      	mov	r0, r5
 8005896:	f000 f883 	bl	80059a0 <__smakebuf_r>
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	f013 0201 	ands.w	r2, r3, #1
 80058a2:	d00a      	beq.n	80058ba <__swsetup_r+0x9a>
 80058a4:	2200      	movs	r2, #0
 80058a6:	60a2      	str	r2, [r4, #8]
 80058a8:	6962      	ldr	r2, [r4, #20]
 80058aa:	4252      	negs	r2, r2
 80058ac:	61a2      	str	r2, [r4, #24]
 80058ae:	6922      	ldr	r2, [r4, #16]
 80058b0:	b942      	cbnz	r2, 80058c4 <__swsetup_r+0xa4>
 80058b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058b6:	d1c5      	bne.n	8005844 <__swsetup_r+0x24>
 80058b8:	bd38      	pop	{r3, r4, r5, pc}
 80058ba:	0799      	lsls	r1, r3, #30
 80058bc:	bf58      	it	pl
 80058be:	6962      	ldrpl	r2, [r4, #20]
 80058c0:	60a2      	str	r2, [r4, #8]
 80058c2:	e7f4      	b.n	80058ae <__swsetup_r+0x8e>
 80058c4:	2000      	movs	r0, #0
 80058c6:	e7f7      	b.n	80058b8 <__swsetup_r+0x98>
 80058c8:	2000001c 	.word	0x2000001c

080058cc <_raise_r>:
 80058cc:	291f      	cmp	r1, #31
 80058ce:	b538      	push	{r3, r4, r5, lr}
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	d904      	bls.n	80058e0 <_raise_r+0x14>
 80058d6:	2316      	movs	r3, #22
 80058d8:	6003      	str	r3, [r0, #0]
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80058e2:	b112      	cbz	r2, 80058ea <_raise_r+0x1e>
 80058e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058e8:	b94b      	cbnz	r3, 80058fe <_raise_r+0x32>
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f830 	bl	8005950 <_getpid_r>
 80058f0:	4622      	mov	r2, r4
 80058f2:	4601      	mov	r1, r0
 80058f4:	4628      	mov	r0, r5
 80058f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058fa:	f000 b817 	b.w	800592c <_kill_r>
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d00a      	beq.n	8005918 <_raise_r+0x4c>
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	d103      	bne.n	800590e <_raise_r+0x42>
 8005906:	2316      	movs	r3, #22
 8005908:	6003      	str	r3, [r0, #0]
 800590a:	2001      	movs	r0, #1
 800590c:	e7e7      	b.n	80058de <_raise_r+0x12>
 800590e:	2100      	movs	r1, #0
 8005910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005914:	4620      	mov	r0, r4
 8005916:	4798      	blx	r3
 8005918:	2000      	movs	r0, #0
 800591a:	e7e0      	b.n	80058de <_raise_r+0x12>

0800591c <raise>:
 800591c:	4b02      	ldr	r3, [pc, #8]	@ (8005928 <raise+0xc>)
 800591e:	4601      	mov	r1, r0
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	f7ff bfd3 	b.w	80058cc <_raise_r>
 8005926:	bf00      	nop
 8005928:	2000001c 	.word	0x2000001c

0800592c <_kill_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4d07      	ldr	r5, [pc, #28]	@ (800594c <_kill_r+0x20>)
 8005930:	2300      	movs	r3, #0
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	f7fb fa89 	bl	8000e50 <_kill>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d102      	bne.n	8005948 <_kill_r+0x1c>
 8005942:	682b      	ldr	r3, [r5, #0]
 8005944:	b103      	cbz	r3, 8005948 <_kill_r+0x1c>
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	2000032c 	.word	0x2000032c

08005950 <_getpid_r>:
 8005950:	f7fb ba76 	b.w	8000e40 <_getpid>

08005954 <__swhatbuf_r>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	460c      	mov	r4, r1
 8005958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595c:	2900      	cmp	r1, #0
 800595e:	b096      	sub	sp, #88	@ 0x58
 8005960:	4615      	mov	r5, r2
 8005962:	461e      	mov	r6, r3
 8005964:	da0d      	bge.n	8005982 <__swhatbuf_r+0x2e>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	bf14      	ite	ne
 8005972:	2340      	movne	r3, #64	@ 0x40
 8005974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005978:	2000      	movs	r0, #0
 800597a:	6031      	str	r1, [r6, #0]
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	b016      	add	sp, #88	@ 0x58
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	466a      	mov	r2, sp
 8005984:	f000 f848 	bl	8005a18 <_fstat_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	dbec      	blt.n	8005966 <__swhatbuf_r+0x12>
 800598c:	9901      	ldr	r1, [sp, #4]
 800598e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005996:	4259      	negs	r1, r3
 8005998:	4159      	adcs	r1, r3
 800599a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800599e:	e7eb      	b.n	8005978 <__swhatbuf_r+0x24>

080059a0 <__smakebuf_r>:
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a4:	079d      	lsls	r5, r3, #30
 80059a6:	4606      	mov	r6, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	d507      	bpl.n	80059bc <__smakebuf_r+0x1c>
 80059ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	2301      	movs	r3, #1
 80059b6:	6163      	str	r3, [r4, #20]
 80059b8:	b003      	add	sp, #12
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059bc:	ab01      	add	r3, sp, #4
 80059be:	466a      	mov	r2, sp
 80059c0:	f7ff ffc8 	bl	8005954 <__swhatbuf_r>
 80059c4:	9f00      	ldr	r7, [sp, #0]
 80059c6:	4605      	mov	r5, r0
 80059c8:	4639      	mov	r1, r7
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff faba 	bl	8004f44 <_malloc_r>
 80059d0:	b948      	cbnz	r0, 80059e6 <__smakebuf_r+0x46>
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	059a      	lsls	r2, r3, #22
 80059d8:	d4ee      	bmi.n	80059b8 <__smakebuf_r+0x18>
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	f043 0302 	orr.w	r3, r3, #2
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	e7e2      	b.n	80059ac <__smakebuf_r+0xc>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	6020      	str	r0, [r4, #0]
 80059ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059f6:	b15b      	cbz	r3, 8005a10 <__smakebuf_r+0x70>
 80059f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f81d 	bl	8005a3c <_isatty_r>
 8005a02:	b128      	cbz	r0, 8005a10 <__smakebuf_r+0x70>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	431d      	orrs	r5, r3
 8005a14:	81a5      	strh	r5, [r4, #12]
 8005a16:	e7cf      	b.n	80059b8 <__smakebuf_r+0x18>

08005a18 <_fstat_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_fstat_r+0x20>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	602b      	str	r3, [r5, #0]
 8005a26:	f7fb fa73 	bl	8000f10 <_fstat>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d102      	bne.n	8005a34 <_fstat_r+0x1c>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	b103      	cbz	r3, 8005a34 <_fstat_r+0x1c>
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	bd38      	pop	{r3, r4, r5, pc}
 8005a36:	bf00      	nop
 8005a38:	2000032c 	.word	0x2000032c

08005a3c <_isatty_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d06      	ldr	r5, [pc, #24]	@ (8005a58 <_isatty_r+0x1c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	f7fb fa72 	bl	8000f30 <_isatty>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_isatty_r+0x1a>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_isatty_r+0x1a>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	2000032c 	.word	0x2000032c

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
